{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"qml-colors \u00b6 Struggling with colors? \u00b6 Are you sick and tired of poorness of Qt Quick's color datatype as much as I am? Ever wanted to have an easier way of doing simple color transformations in QML bindings like following? Rectangle { id: r1 ; color: 'red' } Rectangle { // oh god, I just wanted to add some transparency color: Qt . rgba ( r1 . color . r , r1 . color . g , r1 . color . b , 0.8 ) } What if you could write it like this? Rectangle { color: rgba ( r1 . color , 0.8 ) } Or even like this? Rectangle { color: $ . fadeOut ( r1 . color , 20 . percent ) } Interested? Then welcome aboard! Let's see some examples. With this library you can\u2026 \u00b6 \u2026construct color objects \u00b6 in many various ways Rectangle { color: rgba ( 'indigo' , 0.8 ) // \u21d2 #cc4b0082 (as ARGB) } Rectangle { color: q `# 036 ` // \u21d2 #003366 } Rectangle { color: q ` r: $ { 128 } g: $ { 0 } b: $ { 255 } ` // \u21d2 #8000ff } And even imperatively out of color -properties Item { Component.onCompleted: { const c = q ` yellow ` // It looks like a string, but it's an object! // this is expected console . log ( q ` yellow ` ) // \u21d2 #ffff00 // but let's try this console . log ( q ` yellow ` . r ) // \u21d2 1.0 console . log ( q ` yellow ` . g ) // \u21d2 1.0 console . log ( q ` yellow ` . b ) // \u21d2 0.0 } } \u2026use units \u00b6 Rectangle { color: $ . adjustHue ( '#036' , + 45 [ '\u00b0' ]) // \u21d2 #1a0066 } Rectangle { color: cc `# 036 ` . lighten ( 60 . percent ). color // \u21d2 #99ccff } \u2026rely on a whole bunch of auxiliary color functions \u00b6 Rectangle { color: $ . mix ( '#036' , '#d2e1dd' , 75 [ '%' ]) // \u21d2 #355f84 } Rectangle { color: $ . scale ( '#d2e1dd' , { hsl: { l: - 10 [ '%' ], s: + 10 [ '%' ]}}) // \u21d2 #b3d4cb } Rectangle { color: $ . desaturate ( '#f2ece4' , 20 . percent ) // \u21d2 #eeebe8 } \u2026chain as many transformations as you need \u00b6 Rectangle { color: cc `# 0000 ff ` . adjustHue ( - 105 . deg ) . desaturate ( 20 . percent ) . mix ( 'red' , 85 . percent ) . adjust ({ alpha: - 30 . percent }) . color // \u21d2 #b33cc341 } \u2026work with color s imperatively \u00b6 Rectangle { color: { let newColor = cc ` darkorange ` console . log ( newColor ) // \u21d2 #ffa500 console . log ( newColor . hue , newColor . saturation ) // \u21d2 0.108 1.0 newColor . hue = 20 . deg newColor . saturation = 65 . percent console . log ( newColor ) // \u21d2 #d2642d return newColor . color } } \u2026and maybe something else \u00b6 but I don't even remember. Wanna use it? \u00b6 Convinced? Get started now! Not yet? Anyway, read the documentation and you'll change your mind.","title":"Home"},{"location":"#qml-colors","text":"","title":"qml-colors"},{"location":"#struggling-with-colors","text":"Are you sick and tired of poorness of Qt Quick's color datatype as much as I am? Ever wanted to have an easier way of doing simple color transformations in QML bindings like following? Rectangle { id: r1 ; color: 'red' } Rectangle { // oh god, I just wanted to add some transparency color: Qt . rgba ( r1 . color . r , r1 . color . g , r1 . color . b , 0.8 ) } What if you could write it like this? Rectangle { color: rgba ( r1 . color , 0.8 ) } Or even like this? Rectangle { color: $ . fadeOut ( r1 . color , 20 . percent ) } Interested? Then welcome aboard! Let's see some examples.","title":"Struggling with colors?"},{"location":"#with-this-library-you-can","text":"","title":"With this library you can\u2026"},{"location":"#construct-color-objects","text":"in many various ways Rectangle { color: rgba ( 'indigo' , 0.8 ) // \u21d2 #cc4b0082 (as ARGB) } Rectangle { color: q `# 036 ` // \u21d2 #003366 } Rectangle { color: q ` r: $ { 128 } g: $ { 0 } b: $ { 255 } ` // \u21d2 #8000ff } And even imperatively out of color -properties Item { Component.onCompleted: { const c = q ` yellow ` // It looks like a string, but it's an object! // this is expected console . log ( q ` yellow ` ) // \u21d2 #ffff00 // but let's try this console . log ( q ` yellow ` . r ) // \u21d2 1.0 console . log ( q ` yellow ` . g ) // \u21d2 1.0 console . log ( q ` yellow ` . b ) // \u21d2 0.0 } }","title":"\u2026construct color objects"},{"location":"#use-units","text":"Rectangle { color: $ . adjustHue ( '#036' , + 45 [ '\u00b0' ]) // \u21d2 #1a0066 } Rectangle { color: cc `# 036 ` . lighten ( 60 . percent ). color // \u21d2 #99ccff }","title":"\u2026use units"},{"location":"#rely-on-a-whole-bunch-of-auxiliary-color-functions","text":"Rectangle { color: $ . mix ( '#036' , '#d2e1dd' , 75 [ '%' ]) // \u21d2 #355f84 } Rectangle { color: $ . scale ( '#d2e1dd' , { hsl: { l: - 10 [ '%' ], s: + 10 [ '%' ]}}) // \u21d2 #b3d4cb } Rectangle { color: $ . desaturate ( '#f2ece4' , 20 . percent ) // \u21d2 #eeebe8 }","title":"\u2026rely on a whole bunch of auxiliary color functions"},{"location":"#chain-as-many-transformations-as-you-need","text":"Rectangle { color: cc `# 0000 ff ` . adjustHue ( - 105 . deg ) . desaturate ( 20 . percent ) . mix ( 'red' , 85 . percent ) . adjust ({ alpha: - 30 . percent }) . color // \u21d2 #b33cc341 }","title":"\u2026chain as many transformations as you need"},{"location":"#work-with-colors-imperatively","text":"Rectangle { color: { let newColor = cc ` darkorange ` console . log ( newColor ) // \u21d2 #ffa500 console . log ( newColor . hue , newColor . saturation ) // \u21d2 0.108 1.0 newColor . hue = 20 . deg newColor . saturation = 65 . percent console . log ( newColor ) // \u21d2 #d2642d return newColor . color } }","title":"\u2026work with colors imperatively"},{"location":"#and-maybe-something-else","text":"but I don't even remember.","title":"\u2026and maybe something else"},{"location":"#wanna-use-it","text":"Convinced? Get started now! Not yet? Anyway, read the documentation and you'll change your mind.","title":"Wanna use it?"},{"location":"abbreviations/","text":"","title":"Abbreviations"},{"location":"development/","text":"Development \u00b6 Running tests \u00b6 The best way of making some changes or adding new functionality is to write tests first. I use Qbs 1 as the build system because I like it the most. Please, read the documentation to learn how to set it up. To run the tests, simply execute the command: qbs build Writing documentation \u00b6 For this documentation, I use Material for MkDocs . You'll need a working Python interpreter to use it. Assuming that you have it, first install the MkDocs: macOS / Linux Windows pip3 install mkdocs-material pip install mkdocs-material Then, to run the documentation site locally, you can use: mkdocs serve For the rest of features, check their documentation. It was also developed by Qt company in the past \u21a9","title":"Development"},{"location":"development/#development","text":"","title":"Development"},{"location":"development/#running-tests","text":"The best way of making some changes or adding new functionality is to write tests first. I use Qbs 1 as the build system because I like it the most. Please, read the documentation to learn how to set it up. To run the tests, simply execute the command: qbs build","title":"Running tests"},{"location":"development/#writing-documentation","text":"For this documentation, I use Material for MkDocs . You'll need a working Python interpreter to use it. Assuming that you have it, first install the MkDocs: macOS / Linux Windows pip3 install mkdocs-material pip install mkdocs-material Then, to run the documentation site locally, you can use: mkdocs serve For the rest of features, check their documentation. It was also developed by Qt company in the past \u21a9","title":"Writing documentation"},{"location":"getting-started/basic-concepts/","text":"Basic concepts \u00b6 Before I start explaining to you how to use the library, we need to agree on certain terminology. Color models \u00b6 This library supports several color models described below. Alpha-channel Each model may contain an additional optional alpha-channel that represents transparency (or, to be more precise, opacity). If so, the model's name contains the A letter as you'll see below. RGB \u00b6 Represents a color as a combination of R ed, G reen, and B lue components. More details on Wikipedia . Variants: RGB , ARGB , RGBA . HSL \u00b6 It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) S aturation \\(\\in [0\\%, 100\\%]\\) L ightness \\(\\in [0\\%, 100\\%]\\) More details on Wikipedia . Variants: HSL , HSLA . HSV \u00b6 It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) S aturation \\(\\in [0\\%, 100\\%]\\) V alue \\(\\in [0\\%, 100\\%]\\) ( AKA brightness) More details on Wikipedia . Variants: HSV , HSVA . HWB \u00b6 It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) W hiteness \\(\\in [0\\%, 100\\%]\\) B lackness \\(\\in [0\\%, 100\\%]\\) More details on Wikipedia . Variants: HWB , HWBA . Types \u00b6 Color types \u00b6 color-name \u00b6 It's a string that contains one of the extended color keywords from CSS. List of all names Name Color HEX aliceblue #f0f8ff antiquewhite #faebd7 aqua #00ffff aquamarine #7fffd4 azure #f0ffff beige #f5f5dc bisque #ffe4c4 black #000000 blanchedalmond #ffebcd blue #0000ff blueviolet #8a2be2 brown #a52a2a burlywood #deb887 cadetblue #5f9ea0 chartreuse #7fff00 chocolate #d2691e coral #ff7f50 cornflowerblue #6495ed cornsilk #fff8dc crimson #dc143c cyan #00ffff darkblue #00008b darkcyan #008b8b darkgoldenrod #b8860b darkgray #a9a9a9 darkgreen #006400 darkgrey #a9a9a9 darkkhaki #bdb76b darkmagenta #8b008b darkolivegreen #556b2f darkorange #ff8c00 darkorchid #9932cc darkred #8b0000 darksalmon #e9967a darkseagreen #8fbc8f darkslateblue #483d8b darkslategray #2f4f4f darkslategrey #2f4f4f darkturquoise #00ced1 darkviolet #9400d3 deeppink #ff1493 deepskyblue #00bfff dimgray #696969 dimgrey #696969 dodgerblue #1e90ff firebrick #b22222 floralwhite #fffaf0 forestgreen #228b22 fuchsia #ff00ff gainsboro #dcdcdc ghostwhite #f8f8ff gold #ffd700 goldenrod #daa520 gray #808080 green #008000 greenyellow #adff2f grey #808080 honeydew #f0fff0 hotpink #ff69b4 indianred #cd5c5c indigo #4b0082 ivory #fffff0 khaki #f0e68c lavender #e6e6fa lavenderblush #fff0f5 lawngreen #7cfc00 lemonchiffon #fffacd lightblue #add8e6 lightcoral #f08080 lightcyan #e0ffff lightgoldenrodyellow #fafad2 lightgray #d3d3d3 lightgreen #90ee90 lightgrey #d3d3d3 lightpink #ffb6c1 lightsalmon #ffa07a lightseagreen #20b2aa lightskyblue #87cefa lightslategray #778899 lightslategrey #778899 lightsteelblue #b0c4de lightyellow #ffffe0 lime #00ff00 limegreen #32cd32 linen #faf0e6 magenta #ff00ff maroon #800000 mediumaquamarine #66cdaa mediumblue #0000cd mediumorchid #ba55d3 mediumpurple #9370db mediumseagreen #3cb371 mediumslateblue #7b68ee mediumspringgreen #00fa9a mediumturquoise #48d1cc mediumvioletred #c71585 midnightblue #191970 mintcream #f5fffa mistyrose #ffe4e1 moccasin #ffe4b5 navajowhite #ffdead navy #000080 oldlace #fdf5e6 olive #808000 olivedrab #6b8e23 orange #ffa500 orangered #ff4500 orchid #da70d6 palegoldenrod #eee8aa palegreen #98fb98 paleturquoise #afeeee palevioletred #db7093 papayawhip #ffefd5 peachpuff #ffdab9 peru #cd853f pink #ffc0cb plum #dda0dd powderblue #b0e0e6 purple #800080 random ??? red #ff0000 rosybrown #bc8f8f royalblue #4169e1 saddlebrown #8b4513 salmon #fa8072 sandybrown #f4a460 seagreen #2e8b57 seashell #fff5ee sienna #a0522d silver #c0c0c0 skyblue #87ceeb slateblue #6a5acd slategray #708090 slategrey #708090 snow #fffafa springgreen #00ff7f steelblue #4682b4 tan #d2b48c teal #008080 thistle #d8bfd8 tomato #ff6347 transparent #00000000 turquoise #40e0d0 violet #ee82ee wheat #f5deb3 white #ffffff whitesmoke #f5f5f5 yellow #ffff00 yellowgreen #9acd32 color-literal \u00b6 A string in either form: '#rgb' '#argb' '#rrggbb' '#aarrggbb' Every a , r , g , or b is a hex-digit , i.e. a value 0\u20139 or A\u2013F (or a\u2013f ). They represent alpha, red, green, and blue correspondingly. Expanding rules The #aarrggbb is a full form and all other forms are expanded to it with the following rules: If alpha is omitted, it equals to FF 16 (= 255 10 ). In short form, every digit is doubled. Examples '#70f' // \u21d2 #ff7700ff '#a789' // \u21d2 #aa778899 '#8000ff' // \u21d2 #ff8000ff '#c0ff79bf' // \u21d2 #c0ff79bf Qt color ( qolor ) \u00b6 Qt Quick's color basic type. In this documentation I usually refer to it as qolor to distinguish from the Color class. Read more about qolor vs color in the next chapter. The Color class ( color ) \u00b6 The bread-and-butter of this library is the Color class which provides all the interesting methods . Essentially, it's just a thin wrapper around qolor which provides some additional properties and methods. Read more about qolor vs color in the next chapter. Any type of color ( any-color ) \u00b6 This is a union type that allows using any suitable way of constructing a color object. Can be substituted with: color-name | color-literal | qolor | color . Auxiliary types \u00b6 change-object \u00b6 This type is used only as a parameter of a single method change and corresponding function. Every individual component of this object is of type norm . The default value of each component is null (i.e. no change). This makes every component \u2013 optional! The object itself contains: alpha or a one of the following: { rgb : { red , green , blue }} or { rgb : { r , g , b }} { hsl : { hue , saturation , lightness }} or { hsl : { h , s , l }} { hsv : { hue , saturation , value }} or { hsv : { h , s , v }} { hwb : { hue , whiteness , blackness }} or { hwb : { h , w , b }} Valid examples { alpha : 0.5 , rgb : { r : 0.5 , b : 1.0 }} { hsl : { hue : 270 . deg , saturation : 100 . percent }} Invalid examples // alpha is within rgb, but must be on the top level { rgb : { r : 0.5 , b : 1.0 , a : 0.5 }} { // rgb and hsl can't be mixed within one object rgb : { red : 128 . int , blue : 255 . int } hsl : { hue : 270 . deg , saturation : 100 . percent } } offset-object \u00b6 This type is used only as a parameter of two methods: adjust and scale and corresponding functions. Essentially, it's the same as change-object but every individual component of this object is of type offset instead of norm . The default value of each component is 0.0 (i.e. no change). This makes every component \u2013 optional! The object itself contains: alpha or a one of the following: { rgb : { red , green , blue }} or { rgb : { r , g , b }} { hsl : { hue , saturation , lightness }} or { hsl : { h , s , l }} { hsv : { hue , saturation , value }} or { hsv : { h , s , v }} { hwb : { hue , whiteness , blackness }} or { hwb : { h , w , b }} Valid examples { alpha : + 0.5 , rgb : { r : + 0.3 , b : - 0.2 }} { hsl : { hue : + 30 . deg , saturation : - 20 . percent }} Invalid examples // alpha is within rgb, but must be on the top level { rgb : { r : + 0.5 , b : - 1.0 , a : + 0.5 }} { // rgb and hsl can't be mixed within one object rgb : { red : + 128 . int , blue : - 128 . int } hsl : { hue : - 45 . deg , saturation : - 15 . percent } } Value ranges \u00b6 Normalized real interval ( norm ) \u00b6 $$ n \\in [0, 1] $$ Almost all functions work with arguments that belong to the normalized interval. Also, all color components' values are stored internally as normalized real values. For example, rgba ( 0.5 , 0 , 1 , 1 ) . Normalized real offset interval ( offset ) \u00b6 $$ r \\in [-1, 1] $$ This one is mainly used to denote an offset/change of a normalized value. For instance, { hsl : { saturation : - 0.3 }} . Integer interval ( 8bit ) \u00b6 $$ u \\in [0, 255] $$ This should be quite familiar for those coming from CSS where color components are specified using integers. Usually, functions, that work with such values, have suffix 24 or 32 . For example, rgb24 ( 128 , 0 , 255 ) . Integer offset interval ( 9bit ) \u00b6 $$ s \\in [-255, 255] $$ AFAIR , there are no functions that work with this interval, however, you can use such values, for instance, together with units . Example: { alpha : - 128 . int } .","title":"Basic concepts"},{"location":"getting-started/basic-concepts/#basic-concepts","text":"Before I start explaining to you how to use the library, we need to agree on certain terminology.","title":"Basic concepts"},{"location":"getting-started/basic-concepts/#color-models","text":"This library supports several color models described below. Alpha-channel Each model may contain an additional optional alpha-channel that represents transparency (or, to be more precise, opacity). If so, the model's name contains the A letter as you'll see below.","title":"Color models"},{"location":"getting-started/basic-concepts/#rgb","text":"Represents a color as a combination of R ed, G reen, and B lue components. More details on Wikipedia . Variants: RGB , ARGB , RGBA .","title":"RGB"},{"location":"getting-started/basic-concepts/#hsl","text":"It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) S aturation \\(\\in [0\\%, 100\\%]\\) L ightness \\(\\in [0\\%, 100\\%]\\) More details on Wikipedia . Variants: HSL , HSLA .","title":"HSL"},{"location":"getting-started/basic-concepts/#hsv","text":"It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) S aturation \\(\\in [0\\%, 100\\%]\\) V alue \\(\\in [0\\%, 100\\%]\\) ( AKA brightness) More details on Wikipedia . Variants: HSV , HSVA .","title":"HSV"},{"location":"getting-started/basic-concepts/#hwb","text":"It's an alternative representation of a color in RGB color model that uses a combination of: H ue \\(\\in [0\u00b0, 360\u00b0]\\) W hiteness \\(\\in [0\\%, 100\\%]\\) B lackness \\(\\in [0\\%, 100\\%]\\) More details on Wikipedia . Variants: HWB , HWBA .","title":"HWB"},{"location":"getting-started/basic-concepts/#types","text":"","title":"Types"},{"location":"getting-started/basic-concepts/#color-types","text":"","title":"Color types"},{"location":"getting-started/basic-concepts/#color-name","text":"It's a string that contains one of the extended color keywords from CSS. List of all names Name Color HEX aliceblue #f0f8ff antiquewhite #faebd7 aqua #00ffff aquamarine #7fffd4 azure #f0ffff beige #f5f5dc bisque #ffe4c4 black #000000 blanchedalmond #ffebcd blue #0000ff blueviolet #8a2be2 brown #a52a2a burlywood #deb887 cadetblue #5f9ea0 chartreuse #7fff00 chocolate #d2691e coral #ff7f50 cornflowerblue #6495ed cornsilk #fff8dc crimson #dc143c cyan #00ffff darkblue #00008b darkcyan #008b8b darkgoldenrod #b8860b darkgray #a9a9a9 darkgreen #006400 darkgrey #a9a9a9 darkkhaki #bdb76b darkmagenta #8b008b darkolivegreen #556b2f darkorange #ff8c00 darkorchid #9932cc darkred #8b0000 darksalmon #e9967a darkseagreen #8fbc8f darkslateblue #483d8b darkslategray #2f4f4f darkslategrey #2f4f4f darkturquoise #00ced1 darkviolet #9400d3 deeppink #ff1493 deepskyblue #00bfff dimgray #696969 dimgrey #696969 dodgerblue #1e90ff firebrick #b22222 floralwhite #fffaf0 forestgreen #228b22 fuchsia #ff00ff gainsboro #dcdcdc ghostwhite #f8f8ff gold #ffd700 goldenrod #daa520 gray #808080 green #008000 greenyellow #adff2f grey #808080 honeydew #f0fff0 hotpink #ff69b4 indianred #cd5c5c indigo #4b0082 ivory #fffff0 khaki #f0e68c lavender #e6e6fa lavenderblush #fff0f5 lawngreen #7cfc00 lemonchiffon #fffacd lightblue #add8e6 lightcoral #f08080 lightcyan #e0ffff lightgoldenrodyellow #fafad2 lightgray #d3d3d3 lightgreen #90ee90 lightgrey #d3d3d3 lightpink #ffb6c1 lightsalmon #ffa07a lightseagreen #20b2aa lightskyblue #87cefa lightslategray #778899 lightslategrey #778899 lightsteelblue #b0c4de lightyellow #ffffe0 lime #00ff00 limegreen #32cd32 linen #faf0e6 magenta #ff00ff maroon #800000 mediumaquamarine #66cdaa mediumblue #0000cd mediumorchid #ba55d3 mediumpurple #9370db mediumseagreen #3cb371 mediumslateblue #7b68ee mediumspringgreen #00fa9a mediumturquoise #48d1cc mediumvioletred #c71585 midnightblue #191970 mintcream #f5fffa mistyrose #ffe4e1 moccasin #ffe4b5 navajowhite #ffdead navy #000080 oldlace #fdf5e6 olive #808000 olivedrab #6b8e23 orange #ffa500 orangered #ff4500 orchid #da70d6 palegoldenrod #eee8aa palegreen #98fb98 paleturquoise #afeeee palevioletred #db7093 papayawhip #ffefd5 peachpuff #ffdab9 peru #cd853f pink #ffc0cb plum #dda0dd powderblue #b0e0e6 purple #800080 random ??? red #ff0000 rosybrown #bc8f8f royalblue #4169e1 saddlebrown #8b4513 salmon #fa8072 sandybrown #f4a460 seagreen #2e8b57 seashell #fff5ee sienna #a0522d silver #c0c0c0 skyblue #87ceeb slateblue #6a5acd slategray #708090 slategrey #708090 snow #fffafa springgreen #00ff7f steelblue #4682b4 tan #d2b48c teal #008080 thistle #d8bfd8 tomato #ff6347 transparent #00000000 turquoise #40e0d0 violet #ee82ee wheat #f5deb3 white #ffffff whitesmoke #f5f5f5 yellow #ffff00 yellowgreen #9acd32","title":"color-name"},{"location":"getting-started/basic-concepts/#color-literal","text":"A string in either form: '#rgb' '#argb' '#rrggbb' '#aarrggbb' Every a , r , g , or b is a hex-digit , i.e. a value 0\u20139 or A\u2013F (or a\u2013f ). They represent alpha, red, green, and blue correspondingly. Expanding rules The #aarrggbb is a full form and all other forms are expanded to it with the following rules: If alpha is omitted, it equals to FF 16 (= 255 10 ). In short form, every digit is doubled. Examples '#70f' // \u21d2 #ff7700ff '#a789' // \u21d2 #aa778899 '#8000ff' // \u21d2 #ff8000ff '#c0ff79bf' // \u21d2 #c0ff79bf","title":"color-literal"},{"location":"getting-started/basic-concepts/#qt-color-qolor","text":"Qt Quick's color basic type. In this documentation I usually refer to it as qolor to distinguish from the Color class. Read more about qolor vs color in the next chapter.","title":"Qt color (qolor)"},{"location":"getting-started/basic-concepts/#the-color-class-color","text":"The bread-and-butter of this library is the Color class which provides all the interesting methods . Essentially, it's just a thin wrapper around qolor which provides some additional properties and methods. Read more about qolor vs color in the next chapter.","title":"The Color class (color)"},{"location":"getting-started/basic-concepts/#any-type-of-color-any-color","text":"This is a union type that allows using any suitable way of constructing a color object. Can be substituted with: color-name | color-literal | qolor | color .","title":"Any type of color (any-color)"},{"location":"getting-started/basic-concepts/#auxiliary-types","text":"","title":"Auxiliary types"},{"location":"getting-started/basic-concepts/#change-object","text":"This type is used only as a parameter of a single method change and corresponding function. Every individual component of this object is of type norm . The default value of each component is null (i.e. no change). This makes every component \u2013 optional! The object itself contains: alpha or a one of the following: { rgb : { red , green , blue }} or { rgb : { r , g , b }} { hsl : { hue , saturation , lightness }} or { hsl : { h , s , l }} { hsv : { hue , saturation , value }} or { hsv : { h , s , v }} { hwb : { hue , whiteness , blackness }} or { hwb : { h , w , b }} Valid examples { alpha : 0.5 , rgb : { r : 0.5 , b : 1.0 }} { hsl : { hue : 270 . deg , saturation : 100 . percent }} Invalid examples // alpha is within rgb, but must be on the top level { rgb : { r : 0.5 , b : 1.0 , a : 0.5 }} { // rgb and hsl can't be mixed within one object rgb : { red : 128 . int , blue : 255 . int } hsl : { hue : 270 . deg , saturation : 100 . percent } }","title":"change-object"},{"location":"getting-started/basic-concepts/#offset-object","text":"This type is used only as a parameter of two methods: adjust and scale and corresponding functions. Essentially, it's the same as change-object but every individual component of this object is of type offset instead of norm . The default value of each component is 0.0 (i.e. no change). This makes every component \u2013 optional! The object itself contains: alpha or a one of the following: { rgb : { red , green , blue }} or { rgb : { r , g , b }} { hsl : { hue , saturation , lightness }} or { hsl : { h , s , l }} { hsv : { hue , saturation , value }} or { hsv : { h , s , v }} { hwb : { hue , whiteness , blackness }} or { hwb : { h , w , b }} Valid examples { alpha : + 0.5 , rgb : { r : + 0.3 , b : - 0.2 }} { hsl : { hue : + 30 . deg , saturation : - 20 . percent }} Invalid examples // alpha is within rgb, but must be on the top level { rgb : { r : + 0.5 , b : - 1.0 , a : + 0.5 }} { // rgb and hsl can't be mixed within one object rgb : { red : + 128 . int , blue : - 128 . int } hsl : { hue : - 45 . deg , saturation : - 15 . percent } }","title":"offset-object"},{"location":"getting-started/basic-concepts/#value-ranges","text":"","title":"Value ranges"},{"location":"getting-started/basic-concepts/#normalized-real-interval-norm","text":"$$ n \\in [0, 1] $$ Almost all functions work with arguments that belong to the normalized interval. Also, all color components' values are stored internally as normalized real values. For example, rgba ( 0.5 , 0 , 1 , 1 ) .","title":"Normalized real interval (norm)"},{"location":"getting-started/basic-concepts/#normalized-real-offset-interval-offset","text":"$$ r \\in [-1, 1] $$ This one is mainly used to denote an offset/change of a normalized value. For instance, { hsl : { saturation : - 0.3 }} .","title":"Normalized real offset interval (offset)"},{"location":"getting-started/basic-concepts/#integer-interval-8bit","text":"$$ u \\in [0, 255] $$ This should be quite familiar for those coming from CSS where color components are specified using integers. Usually, functions, that work with such values, have suffix 24 or 32 . For example, rgb24 ( 128 , 0 , 255 ) .","title":"Integer interval (8bit)"},{"location":"getting-started/basic-concepts/#integer-offset-interval-9bit","text":"$$ s \\in [-255, 255] $$ AFAIR , there are no functions that work with this interval, however, you can use such values, for instance, together with units . Example: { alpha : - 128 . int } .","title":"Integer offset interval (9bit)"},{"location":"getting-started/installation/","text":"Installation \u00b6 Already have the library? Skip to the next article . Prerequisites \u00b6 The library has no external dependencies and is written completely in QML and JS, so it doesn't require a C++ compiler either. It also works on all operating systems where QML 2 works. It was written and tested on Qt 5.15, however, maybe it would work starting with Qt 5.12. Usage with earlier versions is not possible because the library relies heavily on ECMA Script 2016 features that were missing in Qt before. Download \u00b6 via Git \u00b6 HTTPS SSH git clone https://github.com/GooRoo/qml-colors.git git clone git@github.com:GooRoo/qml-colors.git as archive \u00b6 Download zip Add to your project \u00b6 I expect that whichever method of getting the source code of the library you chose, you've put it somewhere inside your project folder. Now you are free to pack it as Qt resources or bundle it along with your app 1 . The only thing you have to do is to add a corresponding import path to your QML engine. Having the library installed under 3rdParty/qml-colors , the line that should do the trick will be something similar to: In resources Locally QQmlApplicationEngine engine ; engine . addImportPath ( \"qrc:/3rdParty/qml-colors/qml\" ); QQmlApplicationEngine engine ; engine . addImportPath ( app . applicationDirPath () + \"3rdParty/qml-colors/qml\" ); In any case, you know your project structure better. Just don't forget to add the import path using any of the available ways. Use in QML \u00b6 Just import the module at least once anywhere in your project: Qt 5 Qt 6 import easy . colors 1.0 import easy . colors // never tested it in Qt 6 by the way Note on import You don't need to import it in every file where you want to work with colors because the library modifies the root context object making its functions available everywhere. However, it would hurt no one if you put a corresponding import in every file. If only one of your files will contain the import , remember that it should be the file loaded by QML Engine before you try to use any of the library's facilities. Let it be your main.qml in such a case. Done \u00b6 Success If you did everything according to this manual, you are good to go with using the library now! For that, read the docs of the build system of your choice. \u21a9","title":"Installation"},{"location":"getting-started/installation/#installation","text":"Already have the library? Skip to the next article .","title":"Installation"},{"location":"getting-started/installation/#prerequisites","text":"The library has no external dependencies and is written completely in QML and JS, so it doesn't require a C++ compiler either. It also works on all operating systems where QML 2 works. It was written and tested on Qt 5.15, however, maybe it would work starting with Qt 5.12. Usage with earlier versions is not possible because the library relies heavily on ECMA Script 2016 features that were missing in Qt before.","title":"Prerequisites"},{"location":"getting-started/installation/#download","text":"","title":"Download"},{"location":"getting-started/installation/#via-git","text":"HTTPS SSH git clone https://github.com/GooRoo/qml-colors.git git clone git@github.com:GooRoo/qml-colors.git","title":"via Git"},{"location":"getting-started/installation/#as-archive","text":"Download zip","title":"as archive"},{"location":"getting-started/installation/#add-to-your-project","text":"I expect that whichever method of getting the source code of the library you chose, you've put it somewhere inside your project folder. Now you are free to pack it as Qt resources or bundle it along with your app 1 . The only thing you have to do is to add a corresponding import path to your QML engine. Having the library installed under 3rdParty/qml-colors , the line that should do the trick will be something similar to: In resources Locally QQmlApplicationEngine engine ; engine . addImportPath ( \"qrc:/3rdParty/qml-colors/qml\" ); QQmlApplicationEngine engine ; engine . addImportPath ( app . applicationDirPath () + \"3rdParty/qml-colors/qml\" ); In any case, you know your project structure better. Just don't forget to add the import path using any of the available ways.","title":"Add to your project"},{"location":"getting-started/installation/#use-in-qml","text":"Just import the module at least once anywhere in your project: Qt 5 Qt 6 import easy . colors 1.0 import easy . colors // never tested it in Qt 6 by the way Note on import You don't need to import it in every file where you want to work with colors because the library modifies the root context object making its functions available everywhere. However, it would hurt no one if you put a corresponding import in every file. If only one of your files will contain the import , remember that it should be the file loaded by QML Engine before you try to use any of the library's facilities. Let it be your main.qml in such a case.","title":"Use in QML"},{"location":"getting-started/installation/#done","text":"Success If you did everything according to this manual, you are good to go with using the library now! For that, read the docs of the build system of your choice. \u21a9","title":"Done"},{"location":"getting-started/qolor-vs-color/","text":"qolor vs color \u00b6 When it comes to choosing between qolor and color , it solely depends on the matter of your taste. There are three key differences: color is a wrapper around qolor , so you can't assign it directly to QML's color property . You need to unwrap it first. qolor misses some properties that color has. For example, it lacks HWB support completely. You can chain color transformations on color via dot-syntax, but not on qolor where you have to use procedural style with functions. I'll demonstrate these and other differences on the examples below: Examples \u00b6 Creating a color \u00b6 using a color keyword in QML \u00b6 qolor color Rectangle { color: q ` indigo ` } Rectangle { color: cc ` indigo ` . color } using a color keyword in JS \u00b6 qolor color Item { Component.onCompleted: { const c = q ` indigo ` console . log ( 'RGB:' , c . r , c . g , c . b ) } } Item { Component.onCompleted: { const c = cc ` indigo ` console . log ( 'RGB:' , c . r , c . g , c . b ) } } using an ARGB literal \u00b6 qolor color Rectangle { color: q `# cc8000ff ` } Rectangle { color: cc `# cc8000ff ` . color } using an RGB32 literal \u00b6 qolor color Rectangle { color: q ` $ { 128 } $ { 0 } $ { 255 } ` } Rectangle { color: cc ` $ { 128 } $ { 0 } $ { 255 } ` . color } Accessing color components separately \u00b6 Changing hue and saturation manually \u00b6 qolor color Rectangle { color: { let c = q ` indigo ` c . hslHue = 270 / 360 c . hslSaturation += 0.1 return c } } Rectangle { color: { let c = cc ` indigo ` c . hue = 270 [ '\u00b0' ] c . saturation += 10 [ '%' ] return c . color } } Printing as HWB \u00b6 qolor color // no support Item { function printAsHwb ({ hue : h , blackness : b , whiteness : b }) { const fl = Math . floor console . log ( `hwb( ${ fl ( h * 360 ) } \u00b0, ${ fl ( w * 100 ) } %, ${ fl ( b * 100 ) } %)` ) } Component . onCompleted : { printAsHwb ( cc `indigo` ) // \u21d2 hwb(275\u00b0, 0%, 49%) } } Modification of a color \u00b6 Inverting a color \u00b6 qolor color Rectancle { color: $ . invert ( q ` indigo ` ) } Rectangle { color: cc ` indigo ` . invert (). color } Chain of modifications \u00b6 qolor color Rectangle { color: $ . adjust ( $ . mix ( $ . desaturate ( $ . adjustHue ( cc `# 0000 ff ` , - 105 . deg ), 20 . percent ), 'red' , 85 . percent ), { alpha: - 30 . percent }) } Rectangle { color: cc `# 0000 ff ` . adjustHue ( - 105 . deg ) . desaturate ( 20 . percent ) . mix ( 'red' , 85 . percent ) . adjust ({ alpha: - 30 . percent }) . color } Instead of conclusion \u00b6 As you can see from examples, in most cases it's enough to use qolor and modifying functions . The real beauty of color comes when you need to chain modifications as methods or when you need to work with extended set of properties (for example, with HWB ).","title":"qolor vs color"},{"location":"getting-started/qolor-vs-color/#qolor-vs-color","text":"When it comes to choosing between qolor and color , it solely depends on the matter of your taste. There are three key differences: color is a wrapper around qolor , so you can't assign it directly to QML's color property . You need to unwrap it first. qolor misses some properties that color has. For example, it lacks HWB support completely. You can chain color transformations on color via dot-syntax, but not on qolor where you have to use procedural style with functions. I'll demonstrate these and other differences on the examples below:","title":"qolor vs color"},{"location":"getting-started/qolor-vs-color/#examples","text":"","title":"Examples"},{"location":"getting-started/qolor-vs-color/#creating-a-color","text":"","title":"Creating a color"},{"location":"getting-started/qolor-vs-color/#using-a-color-keyword-in-qml","text":"qolor color Rectangle { color: q ` indigo ` } Rectangle { color: cc ` indigo ` . color }","title":"using a color keyword in QML"},{"location":"getting-started/qolor-vs-color/#using-a-color-keyword-in-js","text":"qolor color Item { Component.onCompleted: { const c = q ` indigo ` console . log ( 'RGB:' , c . r , c . g , c . b ) } } Item { Component.onCompleted: { const c = cc ` indigo ` console . log ( 'RGB:' , c . r , c . g , c . b ) } }","title":"using a color keyword in JS"},{"location":"getting-started/qolor-vs-color/#using-an-argb-literal","text":"qolor color Rectangle { color: q `# cc8000ff ` } Rectangle { color: cc `# cc8000ff ` . color }","title":"using an ARGB literal"},{"location":"getting-started/qolor-vs-color/#using-an-rgb32-literal","text":"qolor color Rectangle { color: q ` $ { 128 } $ { 0 } $ { 255 } ` } Rectangle { color: cc ` $ { 128 } $ { 0 } $ { 255 } ` . color }","title":"using an RGB32 literal"},{"location":"getting-started/qolor-vs-color/#accessing-color-components-separately","text":"","title":"Accessing color components separately"},{"location":"getting-started/qolor-vs-color/#changing-hue-and-saturation-manually","text":"qolor color Rectangle { color: { let c = q ` indigo ` c . hslHue = 270 / 360 c . hslSaturation += 0.1 return c } } Rectangle { color: { let c = cc ` indigo ` c . hue = 270 [ '\u00b0' ] c . saturation += 10 [ '%' ] return c . color } }","title":"Changing hue and saturation manually"},{"location":"getting-started/qolor-vs-color/#printing-as-hwb","text":"qolor color // no support Item { function printAsHwb ({ hue : h , blackness : b , whiteness : b }) { const fl = Math . floor console . log ( `hwb( ${ fl ( h * 360 ) } \u00b0, ${ fl ( w * 100 ) } %, ${ fl ( b * 100 ) } %)` ) } Component . onCompleted : { printAsHwb ( cc `indigo` ) // \u21d2 hwb(275\u00b0, 0%, 49%) } }","title":"Printing as HWB"},{"location":"getting-started/qolor-vs-color/#modification-of-a-color","text":"","title":"Modification of a color"},{"location":"getting-started/qolor-vs-color/#inverting-a-color","text":"qolor color Rectancle { color: $ . invert ( q ` indigo ` ) } Rectangle { color: cc ` indigo ` . invert (). color }","title":"Inverting a color"},{"location":"getting-started/qolor-vs-color/#chain-of-modifications","text":"qolor color Rectangle { color: $ . adjust ( $ . mix ( $ . desaturate ( $ . adjustHue ( cc `# 0000 ff ` , - 105 . deg ), 20 . percent ), 'red' , 85 . percent ), { alpha: - 30 . percent }) } Rectangle { color: cc `# 0000 ff ` . adjustHue ( - 105 . deg ) . desaturate ( 20 . percent ) . mix ( 'red' , 85 . percent ) . adjust ({ alpha: - 30 . percent }) . color }","title":"Chain of modifications"},{"location":"getting-started/qolor-vs-color/#instead-of-conclusion","text":"As you can see from examples, in most cases it's enough to use qolor and modifying functions . The real beauty of color comes when you need to chain modifications as methods or when you need to work with extended set of properties (for example, with HWB ).","title":"Instead of conclusion"},{"location":"getting-started/why/","text":"Why? a.k.a. Rationale \u00b6 Not interested in reasons? Skip to the next article . What does Qt offer? \u00b6 You may be wondering why we need an additional library to work with colors in QML. Does anyone really lack it? Also, Qt provides some functions, doesn't it? Aren't they enough? Spoiler NO, they aren't enough. I'd expect you want more details. So, we start with an examination of what is already available in Qt Quick. Qt Quick's color \u00b6 Maybe it's not that important but beneficial to understand that QML language itself does not provide any color type. Instead, it's registered by Qt Quick framework which is bound to QML so tightly that many people do not distinguish them. Internally, it's implemented as Q_GADGET , so, despite its type being determined as 'object' , we can consider it as a value type, i.e. value semantics is applied, I guess. Having this special type allows us to create properties or variables both declaratively (via property declaration) property color backgroundColor: 'red' and imperatively (via corresponding functions) let c = Qt . rgba ( 1.0 , 0.0 , 0.0 , 0.0 , 1.0 ) However, the overall abilities to work with colors are quite limited. Let's consider three aspects: creation, initialization/assignment, and modification. Creation \u00b6 As mentioned above, the simplest way of creating a color is to define a property of the color type. Besides that, the following functions are available to create colors imperatively: Qt.rgba(r, g, b, a) Qt.hsla(h, s, l, a) Qt.hsva(h, s, v, a) Initialization / assignment \u00b6 To initialize with or assign to a color property or variable, you to pass a result of one of the creational functions . With a color -property, you have one additional choice of passing a string as value. In such a case, the string is implicitly converted to color if it follows one of the following formats: '<color_name>' '#RGB' (translates to '#RRGGBB' , for instance, '#70f' becomes '#7700ff' . It's not mentioned anywhere in the official documentation by the way.) '#RRGGBB' '#AARRGGBB' Modification \u00b6 To modify a color value without deconstructing it and building again, you have the following standard functions: Qt.darker(color, factor = 2.0) Qt.lighter(color, factor = 2.0) Qt.tint(baseColor, tintColor) The darker / lighter functions use quite weird logic behind their factor argument (like they were written by programmers for programmers, ha-ha), e.g. Qt . darker ( 'red' , factor ) sets the color's brightness to \\(\\dfrac{1}{factor}\\) . So if you want to get a color that is 75% as bright as the original one, you have to use the factor of \\(\\dfrac{4}{3}\\) , right? Good luck with explaining this to your designers! How the tint function works, I have no clue. In which proportions does it mix the colors? No idea! Other \u00b6 There is one more auxiliary function: Qt.colorEqual(lhs, rhs) . It's supposed to compare the colors for equality. Guess why? Because you can't simply write '#ff0000' === 'red' as it would compare strings. The official documentation says its return type is color which is obviously not correct. What's wrong with standard functions? \u00b6 It's a good topic for a separate article which I'll definitely write one day but let me outline at least the most noticeable inconveniences: Poor official documentation on colors in general No way to create a color instance from string imperatively There are only functions that work with normalized values ( \\(\\in [0.0, 1.0]\\) ), but no functions that work with commonly used integer values ( \\(\\in [0, 255]\\) ). Not even close to CSS3 (not saying about SCSS/Sass). Why in JavaScript and not in C++? \u00b6 When it comes to making things convenient, C++ is the last thing I would think about. And that is related not only to the development of the library itself but also to further usage. Indeed, the process of connecting a QML module, (partially) written in C++, is quite cumbersome, and heavily relies on the build system of choice and on your toolchain in general. At the same time, you have to do only two steps in order to start using my library. Note to future generations It's quite possible though that the next version of the library will be in C++, but if so, it will be released under another name anyway.","title":"Why?"},{"location":"getting-started/why/#why-aka-rationale","text":"Not interested in reasons? Skip to the next article .","title":"Why? a.k.a. Rationale"},{"location":"getting-started/why/#what-does-qt-offer","text":"You may be wondering why we need an additional library to work with colors in QML. Does anyone really lack it? Also, Qt provides some functions, doesn't it? Aren't they enough? Spoiler NO, they aren't enough. I'd expect you want more details. So, we start with an examination of what is already available in Qt Quick.","title":"What does Qt offer?"},{"location":"getting-started/why/#qt-quicks-color","text":"Maybe it's not that important but beneficial to understand that QML language itself does not provide any color type. Instead, it's registered by Qt Quick framework which is bound to QML so tightly that many people do not distinguish them. Internally, it's implemented as Q_GADGET , so, despite its type being determined as 'object' , we can consider it as a value type, i.e. value semantics is applied, I guess. Having this special type allows us to create properties or variables both declaratively (via property declaration) property color backgroundColor: 'red' and imperatively (via corresponding functions) let c = Qt . rgba ( 1.0 , 0.0 , 0.0 , 0.0 , 1.0 ) However, the overall abilities to work with colors are quite limited. Let's consider three aspects: creation, initialization/assignment, and modification.","title":"Qt Quick's color"},{"location":"getting-started/why/#creation","text":"As mentioned above, the simplest way of creating a color is to define a property of the color type. Besides that, the following functions are available to create colors imperatively: Qt.rgba(r, g, b, a) Qt.hsla(h, s, l, a) Qt.hsva(h, s, v, a)","title":"Creation"},{"location":"getting-started/why/#initialization-assignment","text":"To initialize with or assign to a color property or variable, you to pass a result of one of the creational functions . With a color -property, you have one additional choice of passing a string as value. In such a case, the string is implicitly converted to color if it follows one of the following formats: '<color_name>' '#RGB' (translates to '#RRGGBB' , for instance, '#70f' becomes '#7700ff' . It's not mentioned anywhere in the official documentation by the way.) '#RRGGBB' '#AARRGGBB'","title":"Initialization / assignment"},{"location":"getting-started/why/#modification","text":"To modify a color value without deconstructing it and building again, you have the following standard functions: Qt.darker(color, factor = 2.0) Qt.lighter(color, factor = 2.0) Qt.tint(baseColor, tintColor) The darker / lighter functions use quite weird logic behind their factor argument (like they were written by programmers for programmers, ha-ha), e.g. Qt . darker ( 'red' , factor ) sets the color's brightness to \\(\\dfrac{1}{factor}\\) . So if you want to get a color that is 75% as bright as the original one, you have to use the factor of \\(\\dfrac{4}{3}\\) , right? Good luck with explaining this to your designers! How the tint function works, I have no clue. In which proportions does it mix the colors? No idea!","title":"Modification"},{"location":"getting-started/why/#other","text":"There is one more auxiliary function: Qt.colorEqual(lhs, rhs) . It's supposed to compare the colors for equality. Guess why? Because you can't simply write '#ff0000' === 'red' as it would compare strings. The official documentation says its return type is color which is obviously not correct.","title":"Other"},{"location":"getting-started/why/#whats-wrong-with-standard-functions","text":"It's a good topic for a separate article which I'll definitely write one day but let me outline at least the most noticeable inconveniences: Poor official documentation on colors in general No way to create a color instance from string imperatively There are only functions that work with normalized values ( \\(\\in [0.0, 1.0]\\) ), but no functions that work with commonly used integer values ( \\(\\in [0, 255]\\) ). Not even close to CSS3 (not saying about SCSS/Sass).","title":"What's wrong with standard functions?"},{"location":"getting-started/why/#why-in-javascript-and-not-in-c","text":"When it comes to making things convenient, C++ is the last thing I would think about. And that is related not only to the development of the library itself but also to further usage. Indeed, the process of connecting a QML module, (partially) written in C++, is quite cumbersome, and heavily relies on the build system of choice and on your toolchain in general. At the same time, you have to do only two steps in order to start using my library. Note to future generations It's quite possible though that the next version of the library will be in C++, but if so, it will be released under another name anyway.","title":"Why in JavaScript and not in C++?"},{"location":"reference/","text":"Reference \u00b6 Notation \u00b6 Types of functions \u00b6 To specify types of the functions' arguments and types of their return values, I use the following notation: ( r , g , b , a = 1.0 : 8bit ) \u2192 qolor Read it as following: The function takes 4 arguments: r , g , b , and a . All arguments are of 8bit type. The a argument has default value 1.0 . Thus, it can be omitted. The return value of the function is of type qolor . Parameters of functions \u00b6 Having a function like this: sum : ( x , y : real ) \u2192 real we can invoke it as following: sum ( 10 , 3 ) Parameters of tagged literals \u00b6 Having a tag like this: sum : ( x , y : real ) \u2192 real we can use it as following: sum ` ${ 10 }${ 3 } ` In other words: The whole literal is wrapped into backticks ` Parameters are specified between ${ and } . Every parameter is an expression, thus it can be not only number literals like in most examples but also may contain some calculations: const arr = [ 1 , 2 , 3 ] sum ` ${ 1000 }${ arr . length - 1 } ` Resulting color \u00b6 I use \u21d2 #RRGGBB or \u21d2 #AARRGGBB syntax everywhere to express the resulting color in examples as following: return Qt . rgba ( 0.5 , 0 , 1 , 0.5 ) // \u21d2 #808000ff","title":"Reference"},{"location":"reference/#reference","text":"","title":"Reference"},{"location":"reference/#notation","text":"","title":"Notation"},{"location":"reference/#types-of-functions","text":"To specify types of the functions' arguments and types of their return values, I use the following notation: ( r , g , b , a = 1.0 : 8bit ) \u2192 qolor Read it as following: The function takes 4 arguments: r , g , b , and a . All arguments are of 8bit type. The a argument has default value 1.0 . Thus, it can be omitted. The return value of the function is of type qolor .","title":"Types of functions"},{"location":"reference/#parameters-of-functions","text":"Having a function like this: sum : ( x , y : real ) \u2192 real we can invoke it as following: sum ( 10 , 3 )","title":"Parameters of functions"},{"location":"reference/#parameters-of-tagged-literals","text":"Having a tag like this: sum : ( x , y : real ) \u2192 real we can use it as following: sum ` ${ 10 }${ 3 } ` In other words: The whole literal is wrapped into backticks ` Parameters are specified between ${ and } . Every parameter is an expression, thus it can be not only number literals like in most examples but also may contain some calculations: const arr = [ 1 , 2 , 3 ] sum ` ${ 1000 }${ arr . length - 1 } `","title":"Parameters of tagged literals"},{"location":"reference/#resulting-color","text":"I use \u21d2 #RRGGBB or \u21d2 #AARRGGBB syntax everywhere to express the resulting color in examples as following: return Qt . rgba ( 0.5 , 0 , 1 , 0.5 ) // \u21d2 #808000ff","title":"Resulting color"},{"location":"reference/color-names/","text":"Color names \u00b6 This page contains a list of color names from CSS Color Module Level 3 W3C Recommendation. They can be used in all contexts where color-name is allowed. Extensions \u00b6 Besides the color names from the list, there are two additional keywords: 'transparent' and 'random' . transparent \u00b6 Always returns a fully transparent black color: #00000000 . random \u00b6 Returns a fully opaque random color, i.e. #FFxxyyzz , where xx , yy , and zz are random. Name Color HEX aliceblue #f0f8ff antiquewhite #faebd7 aqua #00ffff aquamarine #7fffd4 azure #f0ffff beige #f5f5dc bisque #ffe4c4 black #000000 blanchedalmond #ffebcd blue #0000ff blueviolet #8a2be2 brown #a52a2a burlywood #deb887 cadetblue #5f9ea0 chartreuse #7fff00 chocolate #d2691e coral #ff7f50 cornflowerblue #6495ed cornsilk #fff8dc crimson #dc143c cyan #00ffff darkblue #00008b darkcyan #008b8b darkgoldenrod #b8860b darkgray #a9a9a9 darkgreen #006400 darkgrey #a9a9a9 darkkhaki #bdb76b darkmagenta #8b008b darkolivegreen #556b2f darkorange #ff8c00 darkorchid #9932cc darkred #8b0000 darksalmon #e9967a darkseagreen #8fbc8f darkslateblue #483d8b darkslategray #2f4f4f darkslategrey #2f4f4f darkturquoise #00ced1 darkviolet #9400d3 deeppink #ff1493 deepskyblue #00bfff dimgray #696969 dimgrey #696969 dodgerblue #1e90ff firebrick #b22222 floralwhite #fffaf0 forestgreen #228b22 fuchsia #ff00ff gainsboro #dcdcdc ghostwhite #f8f8ff gold #ffd700 goldenrod #daa520 gray #808080 green #008000 greenyellow #adff2f grey #808080 honeydew #f0fff0 hotpink #ff69b4 indianred #cd5c5c indigo #4b0082 ivory #fffff0 khaki #f0e68c lavender #e6e6fa lavenderblush #fff0f5 lawngreen #7cfc00 lemonchiffon #fffacd lightblue #add8e6 lightcoral #f08080 lightcyan #e0ffff lightgoldenrodyellow #fafad2 lightgray #d3d3d3 lightgreen #90ee90 lightgrey #d3d3d3 lightpink #ffb6c1 lightsalmon #ffa07a lightseagreen #20b2aa lightskyblue #87cefa lightslategray #778899 lightslategrey #778899 lightsteelblue #b0c4de lightyellow #ffffe0 lime #00ff00 limegreen #32cd32 linen #faf0e6 magenta #ff00ff maroon #800000 mediumaquamarine #66cdaa mediumblue #0000cd mediumorchid #ba55d3 mediumpurple #9370db mediumseagreen #3cb371 mediumslateblue #7b68ee mediumspringgreen #00fa9a mediumturquoise #48d1cc mediumvioletred #c71585 midnightblue #191970 mintcream #f5fffa mistyrose #ffe4e1 moccasin #ffe4b5 navajowhite #ffdead navy #000080 oldlace #fdf5e6 olive #808000 olivedrab #6b8e23 orange #ffa500 orangered #ff4500 orchid #da70d6 palegoldenrod #eee8aa palegreen #98fb98 paleturquoise #afeeee palevioletred #db7093 papayawhip #ffefd5 peachpuff #ffdab9 peru #cd853f pink #ffc0cb plum #dda0dd powderblue #b0e0e6 purple #800080 random ??? red #ff0000 rosybrown #bc8f8f royalblue #4169e1 saddlebrown #8b4513 salmon #fa8072 sandybrown #f4a460 seagreen #2e8b57 seashell #fff5ee sienna #a0522d silver #c0c0c0 skyblue #87ceeb slateblue #6a5acd slategray #708090 slategrey #708090 snow #fffafa springgreen #00ff7f steelblue #4682b4 tan #d2b48c teal #008080 thistle #d8bfd8 tomato #ff6347 transparent #00000000 turquoise #40e0d0 violet #ee82ee wheat #f5deb3 white #ffffff whitesmoke #f5f5f5 yellow #ffff00 yellowgreen #9acd32","title":"Color names"},{"location":"reference/color-names/#color-names","text":"This page contains a list of color names from CSS Color Module Level 3 W3C Recommendation. They can be used in all contexts where color-name is allowed.","title":"Color names"},{"location":"reference/color-names/#extensions","text":"Besides the color names from the list, there are two additional keywords: 'transparent' and 'random' .","title":"Extensions"},{"location":"reference/color-names/#transparent","text":"Always returns a fully transparent black color: #00000000 .","title":"transparent"},{"location":"reference/color-names/#random","text":"Returns a fully opaque random color, i.e. #FFxxyyzz , where xx , yy , and zz are random. Name Color HEX aliceblue #f0f8ff antiquewhite #faebd7 aqua #00ffff aquamarine #7fffd4 azure #f0ffff beige #f5f5dc bisque #ffe4c4 black #000000 blanchedalmond #ffebcd blue #0000ff blueviolet #8a2be2 brown #a52a2a burlywood #deb887 cadetblue #5f9ea0 chartreuse #7fff00 chocolate #d2691e coral #ff7f50 cornflowerblue #6495ed cornsilk #fff8dc crimson #dc143c cyan #00ffff darkblue #00008b darkcyan #008b8b darkgoldenrod #b8860b darkgray #a9a9a9 darkgreen #006400 darkgrey #a9a9a9 darkkhaki #bdb76b darkmagenta #8b008b darkolivegreen #556b2f darkorange #ff8c00 darkorchid #9932cc darkred #8b0000 darksalmon #e9967a darkseagreen #8fbc8f darkslateblue #483d8b darkslategray #2f4f4f darkslategrey #2f4f4f darkturquoise #00ced1 darkviolet #9400d3 deeppink #ff1493 deepskyblue #00bfff dimgray #696969 dimgrey #696969 dodgerblue #1e90ff firebrick #b22222 floralwhite #fffaf0 forestgreen #228b22 fuchsia #ff00ff gainsboro #dcdcdc ghostwhite #f8f8ff gold #ffd700 goldenrod #daa520 gray #808080 green #008000 greenyellow #adff2f grey #808080 honeydew #f0fff0 hotpink #ff69b4 indianred #cd5c5c indigo #4b0082 ivory #fffff0 khaki #f0e68c lavender #e6e6fa lavenderblush #fff0f5 lawngreen #7cfc00 lemonchiffon #fffacd lightblue #add8e6 lightcoral #f08080 lightcyan #e0ffff lightgoldenrodyellow #fafad2 lightgray #d3d3d3 lightgreen #90ee90 lightgrey #d3d3d3 lightpink #ffb6c1 lightsalmon #ffa07a lightseagreen #20b2aa lightskyblue #87cefa lightslategray #778899 lightslategrey #778899 lightsteelblue #b0c4de lightyellow #ffffe0 lime #00ff00 limegreen #32cd32 linen #faf0e6 magenta #ff00ff maroon #800000 mediumaquamarine #66cdaa mediumblue #0000cd mediumorchid #ba55d3 mediumpurple #9370db mediumseagreen #3cb371 mediumslateblue #7b68ee mediumspringgreen #00fa9a mediumturquoise #48d1cc mediumvioletred #c71585 midnightblue #191970 mintcream #f5fffa mistyrose #ffe4e1 moccasin #ffe4b5 navajowhite #ffdead navy #000080 oldlace #fdf5e6 olive #808000 olivedrab #6b8e23 orange #ffa500 orangered #ff4500 orchid #da70d6 palegoldenrod #eee8aa palegreen #98fb98 paleturquoise #afeeee palevioletred #db7093 papayawhip #ffefd5 peachpuff #ffdab9 peru #cd853f pink #ffc0cb plum #dda0dd powderblue #b0e0e6 purple #800080 random ??? red #ff0000 rosybrown #bc8f8f royalblue #4169e1 saddlebrown #8b4513 salmon #fa8072 sandybrown #f4a460 seagreen #2e8b57 seashell #fff5ee sienna #a0522d silver #c0c0c0 skyblue #87ceeb slateblue #6a5acd slategray #708090 slategrey #708090 snow #fffafa springgreen #00ff7f steelblue #4682b4 tan #d2b48c teal #008080 thistle #d8bfd8 tomato #ff6347 transparent #00000000 turquoise #40e0d0 violet #ee82ee wheat #f5deb3 white #ffffff whitesmoke #f5f5f5 yellow #ffff00 yellowgreen #9acd32","title":"random"},{"location":"reference/color/","text":"The Color class \u00b6 Essentially, the Color is just a thin wrapper around Qt Quick's color . It provides useful properties and methods though. They are listed below. Methods \u00b6 Category Methods (and aliases) Multi-changes adjust , change , scale Hue adjustHue (or spin ), complement Brightness darken , lighten Saturation desaturate , grayscale (or greyscale ), saturate Opacity opacify (or fadeIn ), transparentize (or fadeOut ) Other invert , mix adjust \u00b6 Type: ( change : offset-object ) \u2192 color Increases or decreases one or more properties of the color by fixed amounts. Adds the value passed for each keyword argument to the corresponding property of the color, and returns a new adjusted instance of color. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Examples: cc `#6b717f` . adjust ({ rgb : { r : + 15 . int }}) // \u21d2 #7a717f cc `#d2e1dd` . adjust ({ rgb : { red : - 10 . int , blue : + 10 . int }}) // \u21d2 #c8e1e7 cc `#998099` . adjust ({ hsl : { lightness : - 30 . percent }, alpha : - 40 . percent }) // \u21d2 #99473947 See also: change , scale , % , \u00b0 . adjustHue \u00b6 Type: ( offset : offset ) \u2192 color Alias: spin Increases or decreases the color's hue. Examples: // Hue 222\u00b0 becomes 282\u00b0 cc `#6b717f` . adjustHue ( + 60 . deg ) // \u21d2 #796b7f // Hue 164\u00b0 becomes 104\u00b0. cc `#d2e1dd` . spin ( - 60 [ '\u00b0' ]) // \u21d2 #d6e1d2 // Hue 210\u00b0 becomes 255\u00b0 cc `#036` . adjustHue ( + 45 . deg ) // \u21d2 #1a0066 See also: adjust , \u00b0 . change \u00b6 Type: ( change : change-object ) \u2192 color Sets one or more properties of the color to new values and returns a new adjusted instance of color. Restrictions (for more details see change-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type norm and optional. Examples: cc `#6b717f` . change ({ rgb : { r : 100 . int }}) // \u21d2 #64717f cc `#d2e1dd` . change ({ rgb : { red : 100 . int , blue : 50 . int }}) // \u21d2 #64e132 cc `#998099` . change ({ hsl : { lightness : 30 . percent }, alpha : 0.5 }) // \u21d2 #80554455 See also: adjust , scale , % , \u00b0 . complement \u00b6 Type: () \u2192 color Returns the RGB complement of the color. This is identical to color . adjustHue ( - 180 . deg ) . Examples: // Hue 222\u00b0 becomes 42\u00b0 cc `#6b717f` . complement () // \u21d2 #7f796b // Hue 164\u00b0 becomes 344\u00b0 cc `#d2e1dd` . complement () // \u21d2 #e1d2d6 // Hue 210\u00b0 becomes 30\u00b0 cc `#036` . complement () // \u21d2 #663300 See also: adjust , adjustHue , invert . darken \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Makes the color darker by specified amount (by decreasing the HSL lightness ). Examples: // Lightness 92% becomes 72% cc `#b37399` . darken ( 20 [ '%' ]) // \u21d2 #7c4465 // Lightness 85% becomes 45% cc `#f2ece4` . darken ( 40 . percent ) // \u21d2 #b08b5a // Lightness 20% becomes 0% cc `#036` . darken ( 0.3 ) // \u21d2 #000000 // Lightness 50% becomes 25% cc `#8000ff` . darken () // \u21d2 #000000 See also: adjust , % . desaturate \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Makes the color less saturated by specified amount (by decreasing the HSL saturation ). Examples: // Saturation 100% becomes 80% cc `#036` . desaturate ( 20 . percent ) // \u21d2 #0a335c // Saturation 35% becomes 15% cc `#f2ece4` . desaturate ( 20 . percent ) // \u21d2 #eeebe8 // Saturation 20% becomes 0% cc `#d2e1dd` . desaturate ( 30 . percent ) // \u21d2 #dadada // Saturation 100% becomes 75% cc `#8000ff` . desaturate () // \u21d2 #8020df See also: adjust , % . grayscale \u00b6 Type: () \u2192 color Alias: greyscale Returns a gray color with the same lightness as the color's one. This is identical to color . change ({ hsl : { saturation : 0 }}) . Examples: cc `#6b717f` . grayscale () // \u21d2 #757575 cc `#d2e1dd` . grayscale () // \u21d2 #dadada cc `#036` . greyscale () // \u21d2 #333333 See also: change . invert \u00b6 Type: ( weight = 1.0 : norm ) \u2192 color Returns the negative of the color. A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to the original color. weight = 0.5 will always produce #808080 . Examples: cc `#b37399` . invert () // \u21d2 #4c8c66 cc `black` . invert () // \u21d2 #ffffff cc `#550e0cc` . invert ( 20 . percent ) // \u21d2 #663b3a See also: complement , % . lighten \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Makes the color lighter by specified amount (by increasing the HSL lightness ). Examples: // Lightness 46% becomes 66% cc `#6b717f` . lighten ( 20 [ '%' ]) // \u21d2 #a1a5af // Lightness 20% becomes 80% cc `#036` . lighten ( 60 . percent ) // \u21d2 #99ccff // Lightness 85% becomes 100% cc `#e1d7d2` . lighten ( 0.3 ) // \u21d2 #ffffff // Lightness 50% becomes 75% cc `#8000ff` . lighten () // \u21d2 #c080ff See also: adjust , % . mix \u00b6 Type: ( color2 : any-color , weight = 0.5 : norm ) \u2192 color Returns a new color that\u2019s a mixture of the current color and color2 . Both the weight and the relative opacity of each color determines how much of each color is in the result. A larger weight indicates that more of the current color should be used, and a smaller weight indicates that more of color2 should be used. By default, the colors are mixed in equal proportions. Examples: cc `#036` . mix ( cc `#d2e1dd` ) // \u21d2 #698aa2 cc `#036` . mix ( q `#d2e1dd` , 75 . percent ) // \u21d2 #355f84 cc `#036` . mix ( '#d2e1dd' , 25 [ '%' ]) // \u21d2 #9eb6bf cc ` ${ 0.5 . byte } ${ 242 } ${ 236 } ${ 228 } ` . mix ( cc `#6b717f` ) // \u21d2 #8d9098 See also: % . opacify \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Alias: fadeIn Makes the color more opaque by increasing the alpha channel by amount . Examples: cc `#806b717f` . opacify ( 0.2 ) // \u21d2 #b36b717f cc `#80e1d7d2` . fadeIn ( 40 [ '%' ]) // \u21d2 #e6e1d7d2 cc ( rgba ( '#036' , 0.3 )). opacify ( 70 [ '%' ]) // \u21d2 #003366 cc `#808000ff` . opacify () // \u21d2 #c08000ff See also: adjust , % . saturate \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Makes the color more saturated by specified amount (by increasing the HSL saturation ). Examples: // Saturation 50% becomes 70% cc `#c69` . saturate ( 20 . percent ) // \u21d2 #e05299 // Saturation 35% becomes 85% cc `#f2ece4` . saturate ( 50 [ '%' ]) // \u21d2 #fcedda // Saturation 80% becomes 100% cc `#0e4982` . saturate ( 0.3 ) // \u21d2 #004990 // Saturation 75% becomes 100% cc `#8020df` . desaturate () // \u21d2 #8000ff See also: adjust , % . scale \u00b6 Type: ( change : offset-object ) \u2192 color Fluidly scales one or more properties of the color and returns a new adjusted instance of color. Each keyword argument indicates how far the corresponding property of the color should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, { hsl : { lightness : + 50 [ '%' ]}} will make a color 50% closer to maximum lightness without making it fully white. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Although it is possible to specify hue for HSL , HSV , or HWB keyword arguments, it doesn't make much sense because the menthal model of such a change is vague IMO . Examples: cc `#6b717f` . scale ({ rgb : { red : + 15 . percent }}) // \u21d2 #81717f cc `#d2e1dd` . scale ({ hsl : { l : - 10 [ '%' ], s : + 10 [ '%' ] } }) // \u21d2 #b3d4cb cc `#998099` . scale ({ a : - 40 . percent }) // \u21d2 #99998099 See also: adjust , change , % , \u00b0 . transparentize \u00b6 Type: ( amount = 0.25 : norm ) \u2192 color Alias: fadeOut Makes the color less opaque by decreasing the alpha channel by amount . Examples: cc `#806b717f` . transparentize ( 20 . percent ) // \u21d2 #4d6b717f cc ( rgba ( '#e1d7d2' , 0.5 )). fadeOut ( 40 [ '%' ]) // \u21d2 #1ae1d7d2 cc ( rgba ( '#036' , 0.3 )). transparentize ( 0.3 ) // \u21d2 #00003366 cc `#8000ff` . transparentize () // \u21d2 #bf8000ff See also: adjust , % . Properties \u00b6 Category Properties (and aliases) Common alpha (or a ), color (or qolor ), rgb , valid RGB red , green , blue (or just r , g , b ) HSL hue , saturation , lightness (or hslHue , hslSaturation , hslLightness ) HSV hsvHue (or just hue ), hsvSaturation , hsvValue HWB hue , whiteness , blackness (or hwbHue , hwbWhiteness , hwbBlackness ) Own \u00b6 alpha \u00b6 Type: norm Alias: a Returns the alpha channel of the color. blackness \u00b6 Type: norm Alias: hwbBlackness Returns the HWB blackness of the color. See also: hue , whiteness . blue \u00b6 Type: norm Alias: b Returns the RGB blue channel of the color. See also: green , red . color \u00b6 Type: qolor Alias: qolor Returns the underlying Qt Quick's color . green \u00b6 Type: norm Alias: g Returns the RGB green channel of the color. See also: blue , red . hue \u00b6 Type: norm Alias: hslHue , hsvHue , hwbHue Returns the HSL , HSV , or HWB hue of the color. See also: HSL : lightness , saturation HSV : hsvSaturation , hsvValue HWB : blackness , whiteness lightness \u00b6 Type: norm Alias: hslLightness Returns the HSL lightness of the color. See also: hue , saturation . red \u00b6 Type: norm Alias: r Returns the RGB red channel of the color. See also: blue , green . rgb \u00b6 Type: qolor Returns the same color, but with alpha channel set to 100% (fully opaque). See also: alpha , blue , green , red . saturation \u00b6 Type: norm Alias: hslSaturation Returns the HSL saturation of the color. For HSV saturation , see hsvSaturation . See also: hue , lightness . whiteness \u00b6 Type: norm Alias: hwbWhiteness Returns the HWB whiteness of the color. See also: blackness , hue . Inherited from Qt Quick's color \u00b6 a \u00b6 Same as alpha . b \u00b6 Same as blue . g \u00b6 Same as green . hslHue \u00b6 Same as hue . hslLightness \u00b6 Same as lightness . hslSaturation \u00b6 Same as saturation . hsvHue \u00b6 Same as hue . hsvSaturation \u00b6 Type: norm Returns the HSV saturation of the color. For HSL saturation , see saturation . See also: hsvHue , hsvValue . hsvValue \u00b6 Type: norm Returns the HSV value of the color. See also: hsvHue , hsvSaturation . r \u00b6 Same as red . valid \u00b6 Type: boolean Returns true if the color is valid and false otherwise. The only two ways of getting invalid colors in QML I found are: Passing an invalid (for example, default-constructed QColor from C++. Defining an uninitialized color property: Item { property color myColor Component.onCompleted: { console . log ( myColor . valid ) // \u21d2 false } }","title":"The Color class"},{"location":"reference/color/#the-color-class","text":"Essentially, the Color is just a thin wrapper around Qt Quick's color . It provides useful properties and methods though. They are listed below.","title":"The Color class"},{"location":"reference/color/#methods","text":"Category Methods (and aliases) Multi-changes adjust , change , scale Hue adjustHue (or spin ), complement Brightness darken , lighten Saturation desaturate , grayscale (or greyscale ), saturate Opacity opacify (or fadeIn ), transparentize (or fadeOut ) Other invert , mix","title":"Methods"},{"location":"reference/color/#adjust","text":"Type: ( change : offset-object ) \u2192 color Increases or decreases one or more properties of the color by fixed amounts. Adds the value passed for each keyword argument to the corresponding property of the color, and returns a new adjusted instance of color. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Examples: cc `#6b717f` . adjust ({ rgb : { r : + 15 . int }}) // \u21d2 #7a717f cc `#d2e1dd` . adjust ({ rgb : { red : - 10 . int , blue : + 10 . int }}) // \u21d2 #c8e1e7 cc `#998099` . adjust ({ hsl : { lightness : - 30 . percent }, alpha : - 40 . percent }) // \u21d2 #99473947 See also: change , scale , % , \u00b0 .","title":"adjust"},{"location":"reference/color/#adjusthue","text":"Type: ( offset : offset ) \u2192 color Alias: spin Increases or decreases the color's hue. Examples: // Hue 222\u00b0 becomes 282\u00b0 cc `#6b717f` . adjustHue ( + 60 . deg ) // \u21d2 #796b7f // Hue 164\u00b0 becomes 104\u00b0. cc `#d2e1dd` . spin ( - 60 [ '\u00b0' ]) // \u21d2 #d6e1d2 // Hue 210\u00b0 becomes 255\u00b0 cc `#036` . adjustHue ( + 45 . deg ) // \u21d2 #1a0066 See also: adjust , \u00b0 .","title":"adjustHue"},{"location":"reference/color/#change","text":"Type: ( change : change-object ) \u2192 color Sets one or more properties of the color to new values and returns a new adjusted instance of color. Restrictions (for more details see change-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type norm and optional. Examples: cc `#6b717f` . change ({ rgb : { r : 100 . int }}) // \u21d2 #64717f cc `#d2e1dd` . change ({ rgb : { red : 100 . int , blue : 50 . int }}) // \u21d2 #64e132 cc `#998099` . change ({ hsl : { lightness : 30 . percent }, alpha : 0.5 }) // \u21d2 #80554455 See also: adjust , scale , % , \u00b0 .","title":"change"},{"location":"reference/color/#complement","text":"Type: () \u2192 color Returns the RGB complement of the color. This is identical to color . adjustHue ( - 180 . deg ) . Examples: // Hue 222\u00b0 becomes 42\u00b0 cc `#6b717f` . complement () // \u21d2 #7f796b // Hue 164\u00b0 becomes 344\u00b0 cc `#d2e1dd` . complement () // \u21d2 #e1d2d6 // Hue 210\u00b0 becomes 30\u00b0 cc `#036` . complement () // \u21d2 #663300 See also: adjust , adjustHue , invert .","title":"complement"},{"location":"reference/color/#darken","text":"Type: ( amount = 0.25 : norm ) \u2192 color Makes the color darker by specified amount (by decreasing the HSL lightness ). Examples: // Lightness 92% becomes 72% cc `#b37399` . darken ( 20 [ '%' ]) // \u21d2 #7c4465 // Lightness 85% becomes 45% cc `#f2ece4` . darken ( 40 . percent ) // \u21d2 #b08b5a // Lightness 20% becomes 0% cc `#036` . darken ( 0.3 ) // \u21d2 #000000 // Lightness 50% becomes 25% cc `#8000ff` . darken () // \u21d2 #000000 See also: adjust , % .","title":"darken"},{"location":"reference/color/#desaturate","text":"Type: ( amount = 0.25 : norm ) \u2192 color Makes the color less saturated by specified amount (by decreasing the HSL saturation ). Examples: // Saturation 100% becomes 80% cc `#036` . desaturate ( 20 . percent ) // \u21d2 #0a335c // Saturation 35% becomes 15% cc `#f2ece4` . desaturate ( 20 . percent ) // \u21d2 #eeebe8 // Saturation 20% becomes 0% cc `#d2e1dd` . desaturate ( 30 . percent ) // \u21d2 #dadada // Saturation 100% becomes 75% cc `#8000ff` . desaturate () // \u21d2 #8020df See also: adjust , % .","title":"desaturate"},{"location":"reference/color/#grayscale","text":"Type: () \u2192 color Alias: greyscale Returns a gray color with the same lightness as the color's one. This is identical to color . change ({ hsl : { saturation : 0 }}) . Examples: cc `#6b717f` . grayscale () // \u21d2 #757575 cc `#d2e1dd` . grayscale () // \u21d2 #dadada cc `#036` . greyscale () // \u21d2 #333333 See also: change .","title":"grayscale"},{"location":"reference/color/#invert","text":"Type: ( weight = 1.0 : norm ) \u2192 color Returns the negative of the color. A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to the original color. weight = 0.5 will always produce #808080 . Examples: cc `#b37399` . invert () // \u21d2 #4c8c66 cc `black` . invert () // \u21d2 #ffffff cc `#550e0cc` . invert ( 20 . percent ) // \u21d2 #663b3a See also: complement , % .","title":"invert"},{"location":"reference/color/#lighten","text":"Type: ( amount = 0.25 : norm ) \u2192 color Makes the color lighter by specified amount (by increasing the HSL lightness ). Examples: // Lightness 46% becomes 66% cc `#6b717f` . lighten ( 20 [ '%' ]) // \u21d2 #a1a5af // Lightness 20% becomes 80% cc `#036` . lighten ( 60 . percent ) // \u21d2 #99ccff // Lightness 85% becomes 100% cc `#e1d7d2` . lighten ( 0.3 ) // \u21d2 #ffffff // Lightness 50% becomes 75% cc `#8000ff` . lighten () // \u21d2 #c080ff See also: adjust , % .","title":"lighten"},{"location":"reference/color/#mix","text":"Type: ( color2 : any-color , weight = 0.5 : norm ) \u2192 color Returns a new color that\u2019s a mixture of the current color and color2 . Both the weight and the relative opacity of each color determines how much of each color is in the result. A larger weight indicates that more of the current color should be used, and a smaller weight indicates that more of color2 should be used. By default, the colors are mixed in equal proportions. Examples: cc `#036` . mix ( cc `#d2e1dd` ) // \u21d2 #698aa2 cc `#036` . mix ( q `#d2e1dd` , 75 . percent ) // \u21d2 #355f84 cc `#036` . mix ( '#d2e1dd' , 25 [ '%' ]) // \u21d2 #9eb6bf cc ` ${ 0.5 . byte } ${ 242 } ${ 236 } ${ 228 } ` . mix ( cc `#6b717f` ) // \u21d2 #8d9098 See also: % .","title":"mix"},{"location":"reference/color/#opacify","text":"Type: ( amount = 0.25 : norm ) \u2192 color Alias: fadeIn Makes the color more opaque by increasing the alpha channel by amount . Examples: cc `#806b717f` . opacify ( 0.2 ) // \u21d2 #b36b717f cc `#80e1d7d2` . fadeIn ( 40 [ '%' ]) // \u21d2 #e6e1d7d2 cc ( rgba ( '#036' , 0.3 )). opacify ( 70 [ '%' ]) // \u21d2 #003366 cc `#808000ff` . opacify () // \u21d2 #c08000ff See also: adjust , % .","title":"opacify"},{"location":"reference/color/#saturate","text":"Type: ( amount = 0.25 : norm ) \u2192 color Makes the color more saturated by specified amount (by increasing the HSL saturation ). Examples: // Saturation 50% becomes 70% cc `#c69` . saturate ( 20 . percent ) // \u21d2 #e05299 // Saturation 35% becomes 85% cc `#f2ece4` . saturate ( 50 [ '%' ]) // \u21d2 #fcedda // Saturation 80% becomes 100% cc `#0e4982` . saturate ( 0.3 ) // \u21d2 #004990 // Saturation 75% becomes 100% cc `#8020df` . desaturate () // \u21d2 #8000ff See also: adjust , % .","title":"saturate"},{"location":"reference/color/#scale","text":"Type: ( change : offset-object ) \u2192 color Fluidly scales one or more properties of the color and returns a new adjusted instance of color. Each keyword argument indicates how far the corresponding property of the color should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, { hsl : { lightness : + 50 [ '%' ]}} will make a color 50% closer to maximum lightness without making it fully white. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Although it is possible to specify hue for HSL , HSV , or HWB keyword arguments, it doesn't make much sense because the menthal model of such a change is vague IMO . Examples: cc `#6b717f` . scale ({ rgb : { red : + 15 . percent }}) // \u21d2 #81717f cc `#d2e1dd` . scale ({ hsl : { l : - 10 [ '%' ], s : + 10 [ '%' ] } }) // \u21d2 #b3d4cb cc `#998099` . scale ({ a : - 40 . percent }) // \u21d2 #99998099 See also: adjust , change , % , \u00b0 .","title":"scale"},{"location":"reference/color/#transparentize","text":"Type: ( amount = 0.25 : norm ) \u2192 color Alias: fadeOut Makes the color less opaque by decreasing the alpha channel by amount . Examples: cc `#806b717f` . transparentize ( 20 . percent ) // \u21d2 #4d6b717f cc ( rgba ( '#e1d7d2' , 0.5 )). fadeOut ( 40 [ '%' ]) // \u21d2 #1ae1d7d2 cc ( rgba ( '#036' , 0.3 )). transparentize ( 0.3 ) // \u21d2 #00003366 cc `#8000ff` . transparentize () // \u21d2 #bf8000ff See also: adjust , % .","title":"transparentize"},{"location":"reference/color/#properties","text":"Category Properties (and aliases) Common alpha (or a ), color (or qolor ), rgb , valid RGB red , green , blue (or just r , g , b ) HSL hue , saturation , lightness (or hslHue , hslSaturation , hslLightness ) HSV hsvHue (or just hue ), hsvSaturation , hsvValue HWB hue , whiteness , blackness (or hwbHue , hwbWhiteness , hwbBlackness )","title":"Properties"},{"location":"reference/color/#own","text":"","title":"Own"},{"location":"reference/color/#alpha","text":"Type: norm Alias: a Returns the alpha channel of the color.","title":"alpha"},{"location":"reference/color/#blackness","text":"Type: norm Alias: hwbBlackness Returns the HWB blackness of the color. See also: hue , whiteness .","title":"blackness"},{"location":"reference/color/#blue","text":"Type: norm Alias: b Returns the RGB blue channel of the color. See also: green , red .","title":"blue"},{"location":"reference/color/#color","text":"Type: qolor Alias: qolor Returns the underlying Qt Quick's color .","title":"color"},{"location":"reference/color/#green","text":"Type: norm Alias: g Returns the RGB green channel of the color. See also: blue , red .","title":"green"},{"location":"reference/color/#hue","text":"Type: norm Alias: hslHue , hsvHue , hwbHue Returns the HSL , HSV , or HWB hue of the color. See also: HSL : lightness , saturation HSV : hsvSaturation , hsvValue HWB : blackness , whiteness","title":"hue"},{"location":"reference/color/#lightness","text":"Type: norm Alias: hslLightness Returns the HSL lightness of the color. See also: hue , saturation .","title":"lightness"},{"location":"reference/color/#red","text":"Type: norm Alias: r Returns the RGB red channel of the color. See also: blue , green .","title":"red"},{"location":"reference/color/#rgb","text":"Type: qolor Returns the same color, but with alpha channel set to 100% (fully opaque). See also: alpha , blue , green , red .","title":"rgb"},{"location":"reference/color/#saturation","text":"Type: norm Alias: hslSaturation Returns the HSL saturation of the color. For HSV saturation , see hsvSaturation . See also: hue , lightness .","title":"saturation"},{"location":"reference/color/#whiteness","text":"Type: norm Alias: hwbWhiteness Returns the HWB whiteness of the color. See also: blackness , hue .","title":"whiteness"},{"location":"reference/color/#inherited-from-qt-quicks-color","text":"","title":"Inherited from Qt Quick's color"},{"location":"reference/color/#a","text":"Same as alpha .","title":"a"},{"location":"reference/color/#b","text":"Same as blue .","title":"b"},{"location":"reference/color/#g","text":"Same as green .","title":"g"},{"location":"reference/color/#hslhue","text":"Same as hue .","title":"hslHue"},{"location":"reference/color/#hsllightness","text":"Same as lightness .","title":"hslLightness"},{"location":"reference/color/#hslsaturation","text":"Same as saturation .","title":"hslSaturation"},{"location":"reference/color/#hsvhue","text":"Same as hue .","title":"hsvHue"},{"location":"reference/color/#hsvsaturation","text":"Type: norm Returns the HSV saturation of the color. For HSL saturation , see saturation . See also: hsvHue , hsvValue .","title":"hsvSaturation"},{"location":"reference/color/#hsvvalue","text":"Type: norm Returns the HSV value of the color. See also: hsvHue , hsvSaturation .","title":"hsvValue"},{"location":"reference/color/#r","text":"Same as red .","title":"r"},{"location":"reference/color/#valid","text":"Type: boolean Returns true if the color is valid and false otherwise. The only two ways of getting invalid colors in QML I found are: Passing an invalid (for example, default-constructed QColor from C++. Defining an uninitialized color property: Item { property color myColor Component.onCompleted: { console . log ( myColor . valid ) // \u21d2 false } }","title":"valid"},{"location":"reference/functions/","text":"Functions \u00b6 This page describes global functions If you are looking for tagged literals or the Color class' methods , check the links. Constructors \u00b6 qolor \u00b6 Type: ( color : any-color ) \u2192 qolor Alias: q Constructs a Qt Quick's color from any other color . Examples: q ( 'indigo' ) // \u21d2 #4b0082 q ( Qt . rgba ( 1 , 1 , 0 , 1 )) // \u21d2 #ffff00 q ( argb32 ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` ) // \u21d2 #ccff8000 q ( cc `#789` ) // \u21d2 #778899 color \u00b6 Type: ( color : any-color ) \u2192 color Alias: cc Constructs an instance of the Color class from any other color . Examples: cc ( 'indigo' ) // \u21d2 #4b0082 cc ( Qt . rgba ( 1 , 1 , 0 , 1 )) // \u21d2 #ffff00 cc ( argb32 ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` ) // \u21d2 #ccff8000 cc ( cc `#789` ) // \u21d2 #778899 rgba \u00b6 Type: ( red , green , blue , alpha = 1.0 : norm ) \u2192 qolor ( color : any-color , alpha = 1.0 : norm ) \u2192 qolor (1) (2) Alias: rgb Creates a color either from RGBA parameters (1) or from a color and alpha (2). In the latter case, if the color has already some transparency, it will be overridden by a specified value of alpha channel. If this function can't construct a color from its parameters, an exception is raised. Examples: rgba ( 0.5 , 0 , 1 , 0.5 ) // \u21d2 #808000ff rgba ( '#8000ff' , 0.5 ) // \u21d2 #808000ff rgba ( 1 , 0.5 , 0 , 80 [ '%' ]) // \u21d2 #ccff8000 (no alpha): rgb ( 0 , 87 . int , 0.72 ) // \u21d2 #0057b7 rgb ( 1 , 0xD7 . int , 0 ) // \u21d2 #ffd700 rgba32 \u00b6 Type: ( red , green , blue , alpha = 255 : 8bit ) \u2192 qolor ( color : any-color , alpha = 255 : 8bit ) \u2192 qolor (1) (2) Alias: rgb24 Creates a color either from RGBA parameters (1) or from a color and alpha (2). In the latter case, if the color has already some transparency, it will be overridden by a specified value of alpha channel. If this function can't construct a color from its parameters, an exception is raised. Examples: rgba32 ( 128 , 0 , 255 , 128 ) // \u21d2 #808000ff rgba32 ( '#8000ff' , 128 ) // \u21d2 #808000ff rgba32 ( 0xFF , 0x80 , 0x00 , 0xCC ) // \u21d2 #ccff8000 (no alpha): rgb24 ( 0 , 87 , 183 ) // \u21d2 #0057b7 rgb24 ( 255 , 215 , 0 ) // \u21d2 #ffd700 argb \u00b6 Type: ( alpha , red , green , blue : norm ) \u2192 qolor Creates a color from ARGB parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: argb ( 0.5 , 0.5 , 0 , 1 ) // \u21d2 #808000ff argb ( 80 [ '%' ], 1 , 0.5 , 0 ) // \u21d2 #ccff8000 argb32 \u00b6 Type: ( alpha , red , green , blue : 8bit ) \u2192 qolor Creates a color from ARGB parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: argb32 ( 128 , 128 , 0 , 255 ) // \u21d2 #808000ff argb32 ( 0x80 , 0.5 . byte , 0 , 0xFF ) // \u21d2 #808000ff argb32 ( 204 , 255 , 128 , 0 ) // \u21d2 #ccff8000 hsla \u00b6 Type: ( hue , saturation , lightness , alpha = 1.0 : norm ) \u2192 qolor Alias: hsl Creates a color from HSLA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hsla ( 0.75 , 1 , 0.5 , 0.5 ) // \u21d2 #808000ff hsla ( 270 . deg , 100 . percent , 50 . percent , 50 . percent , ) // \u21d2 #808000ff hsla ( 30 [ '\u00b0' ], 100 [ '%' ], 50 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hsl ( 211 . deg , 100 . percent , 36 . percent ) // \u21d2 #0057b7 hsl ( 51 . deg , 100 . percent , 50 . percent ) // \u21d2 #ffd700 hsva \u00b6 Type: ( hue , saturation , value , alpha = 1.0 : norm ) \u2192 qolor Alias: hsv Creates a color from HSVA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hsva ( 0.75 , 1 , 1 , 0.5 ) // \u21d2 #808000ff hsva ( 270 . deg , 100 . percent , 100 . percent , 50 . percent ) // \u21d2 #808000ff hsva ( 30 [ '\u00b0' ], 100 [ '%' ], 100 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hsv ( 211 . deg , 100 . percent , 72 . percent ) // \u21d2 #0057b7 hsv ( 51 . deg , 100 . percent , 100 . percent ) // \u21d2 #ffd700 hwba \u00b6 Type: ( hue , whiteness , blackness , alpha = 1.0 : norm ) \u2192 qolor Alias: hwb Creates a color from HWBA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hwba ( 0.75 , 0 , 0 , 0.5 ) // \u21d2 #808000ff hwba ( 270 . deg , 0 . percent , 0 . percent , 50 . percent ) // \u21d2 #808000ff hwba ( 30 [ '\u00b0' ], 0 [ '%' ], 0 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hwb ( 211 . deg , 0 . percent , 28 . percent ) // \u21d2 #0057b7 hwb ( 51 . deg , 0 . percent , 0 . percent ) // \u21d2 #ffd700 Modificators \u00b6 How to access these functions To avoid clashes with your own functions' names, all modifying functions are defined not globally but on the $ global object instead (similarly to jQuery 1 ). It means that you can call them the following way: $ . invert ( 'white' ) // \u21d2 #000000 Category Functions (and aliases) Multi-changes adjust , change , scale Hue adjustHue (or spin ), complement Brightness darken , lighten Saturation desaturate , grayscale (or greyscale ), saturate Opacity opacify (or fadeIn ), transparentize (or fadeOut ) Other invert , mix adjust \u00b6 Type: ( color : any-color , change : offset-object ) \u2192 qolor Increases or decreases one or more properties of the color by fixed amounts. Adds the value passed for each keyword argument to the corresponding property of the color , and returns a new adjusted instance of color. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Examples: $ . adjust ( '#6b717f' , { rgb : { r : + 15 . int }}) // \u21d2 #7a717f $ . adjust ( '#d2e1dd' , { rgb : { red : - 10 . int , blue : + 10 . int }}) // \u21d2 #c8e1e7 $ . adjust ( '#998099' , { hsl : { lightness : - 30 . percent }, alpha : - 40 . percent }) // \u21d2 #99473947 See also: change , scale , % , \u00b0 . adjustHue \u00b6 Type: ( color : any-color , offset : offset ) \u2192 qolor Alias: spin Increases or decreases the color 's hue. Examples: // Hue 222\u00b0 becomes 282\u00b0 $ . adjustHue ( '#6b717f' , + 60 . deg ) // \u21d2 #796b7f // Hue 164\u00b0 becomes 104\u00b0. $ . spin ( '#d2e1dd' , - 60 [ '\u00b0' ]) // \u21d2 #d6e1d2 // Hue 210\u00b0 becomes 255\u00b0 $ . adjustHue ( '#036' , + 45 . deg ) // \u21d2 #1a0066 See also: adjust , \u00b0 . change \u00b6 Type: ( color : any-color , change : change-object ) \u2192 qolor Sets one or more properties of the color to new values and returns a new adjusted instance of color. Restrictions (for more details see change-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type norm and optional. Examples: $ . change ( '#6b717f' , { rgb : { r : 100 . int }}) // \u21d2 #64717f $ . change ( '#d2e1dd' , { rgb : { red : 100 . int , blue : 50 . int }}) // \u21d2 #64e132 $ . change ( '#998099' , { hsl : { lightness : 30 . percent }, alpha : 0.5 }) // \u21d2 #80554455 See also: adjust , scale , % , \u00b0 . complement \u00b6 Type: ( color : any-color ) \u2192 qolor Returns the RGB complement of the color . This is identical to adjustHue ( color , - 180 . deg ) . Examples: // Hue 222\u00b0 becomes 42\u00b0 $ . complement ( '#6b717f' ) // \u21d2 #7f796b // Hue 164\u00b0 becomes 344\u00b0 $ . complement ( '#d2e1dd' ) // \u21d2 #e1d2d6 // Hue 210\u00b0 becomes 30\u00b0 $ . complement ( '#036' ) // \u21d2 #663300 See also: adjust , adjustHue , invert . darken \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color darker by specified amount (by decreasing the HSL lightness ). Examples: // Lightness 92% becomes 72% $ . darken ( '#b37399' , 20 [ '%' ]) // \u21d2 #7c4465 // Lightness 85% becomes 45% $ . darken ( '#f2ece4' , 40 . percent ) // \u21d2 #b08b5a // Lightness 20% becomes 0% $ . darken ( '#036' , 0.3 ) // \u21d2 #000000 // Lightness 50% becomes 25% $ . darken ( '#8000ff' ) // \u21d2 #000000 See also: adjust , % . desaturate \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color less saturated by specified amount (by decreasing the HSL saturation ). Examples: // Saturation 100% becomes 80% $ . desaturate ( '#036' , 20 . percent ) // \u21d2 #0a335c // Saturation 35% becomes 15% $ . desaturate ( '#f2ece4' , 20 . percent ) // \u21d2 #eeebe8 // Saturation 20% becomes 0% $ . desaturate ( '#d2e1dd' , 30 . percent ) // \u21d2 #dadada // Saturation 100% becomes 75% $ . desaturate ( '#8000ff' ) // \u21d2 #8020df See also: adjust , % . grayscale \u00b6 Type: ( color : any-color ) \u2192 qolor Alias: greyscale Returns a gray color with the same lightness as the color 's one. This is identical to change ( color , { hsl : { saturation : 0 }}) . Examples: $ . grayscale ( '#6b717f' ) // \u21d2 #757575 $ . grayscale ( '#d2e1dd' ) // \u21d2 #dadada $ . greyscale ( '#036' ) // \u21d2 #333333 See also: change . invert \u00b6 Type: ( color : any-color , weight = 1.0 : norm ) \u2192 qolor Returns the negative of the color . A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to the original color . weight = 0.5 will always produce #808080 . Examples: $ . invert ( '#b37399' ) // \u21d2 #4c8c66 $ . invert ( 'black' ) // \u21d2 #ffffff $ . invert ( '#550e0cc' , 20 . percent ) // \u21d2 #663b3a See also: complement , % . lighten \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color lighter by specified amount (by increasing the HSL lightness ). Examples: // Lightness 46% becomes 66% $ . lighten ( '#6b717f' , 20 [ '%' ]) // \u21d2 #a1a5af // Lightness 20% becomes 80% $ . lighten ( '#036' , 60 . percent ) // \u21d2 #99ccff // Lightness 85% becomes 100% $ . lighten ( '#e1d7d2' , 0.3 ) // \u21d2 #ffffff // Lightness 50% becomes 75% $ . lighten ( '#8000ff' ) // \u21d2 #c080ff See also: adjust , % . mix \u00b6 Type: ( color1 , color2 : any-color , weight = 0.5 : norm ) \u2192 qolor Returns a new color that\u2019s a mixture of color1 and color2 . Both the weight and the relative opacity of each color determines how much of each color is in the result. A larger weight indicates that more of color1 should be used, and a smaller weight indicates that more of color2 should be used. By default, the colors are mixed in equal proportions. Examples: $ . mix ( '#036' , cc `#d2e1dd` ) // \u21d2 #698aa2 $ . mix ( '#036' , q `#d2e1dd` , 75 . percent ) // \u21d2 #355f84 $ . mix ( '#036' , '#d2e1dd' , 25 [ '%' ]) // \u21d2 #9eb6bf $ . mix ( cc ` ${ 0.5 . byte } ${ 242 } ${ 236 } ${ 228 } ` , cc `#6b717f` ) // \u21d2 #8d9098 See also: % . opacify \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Alias: fadeIn Makes the color more opaque by increasing the alpha channel by amount . Examples: $ . opacify ( '#806b717f' , 0.2 ) // \u21d2 #b36b717f $ . fadeIn ( '#80e1d7d2' , 40 [ '%' ]) // \u21d2 #e6e1d7d2 $ . opacify ( rgba ( '#036' , 0.3 ), 70 [ '%' ]) // \u21d2 #003366 $ . opacify ( '#808000ff' ) // \u21d2 #c08000ff See also: adjust , % . saturate \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color more saturated by specified amount (by increasing the HSL saturation ). Examples: // Saturation 50% becomes 70% $ . saturate ( '#c69' , 20 . percent ) // \u21d2 #e05299 // Saturation 35% becomes 85% $ . saturate ( '#f2ece4' , 50 [ '%' ]) // \u21d2 #fcedda // Saturation 80% becomes 100% $ . saturate ( '#0e4982' , 0.3 ) // \u21d2 #004990 // Saturation 75% becomes 100% $ . desaturate ( '#8020df' ) // \u21d2 #8000ff See also: adjust , % . scale \u00b6 Type: ( color : any-color , change : offset-object ) \u2192 qolor Fluidly scales one or more properties of the color and returns a new adjusted instance of color. Each keyword argument indicates how far the corresponding property of the color should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, { hsl : { lightness : + 50 [ '%' ]}} will make the color 50% closer to maximum lightness without making it fully white. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Although it is possible to specify hue for HSL , HSV , or HWB keyword arguments, it doesn't make much sense because the menthal model of such a change is vague IMO . Examples: $ . scale ( '#6b717f' , { rgb : { red : + 15 . percent }}) // \u21d2 #81717f $ . scale ( '#d2e1dd' , { hsl : { l : - 10 [ '%' ], s : + 10 [ '%' ] } }) // \u21d2 #b3d4cb $ . scale ( '#998099' , { a : - 40 . percent }) // \u21d2 #99998099 See also: adjust , change , % , \u00b0 . transparentize \u00b6 Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Alias: fadeOut Makes the color less opaque by decreasing the alpha channel by amount . Examples: $ . transparentize ( '#806b717f' , 20 . percent ) // \u21d2 #4d6b717f $ . fadeOut ( rgba ( '#e1d7d2' , 0.5 ), 40 [ '%' ]) // \u21d2 #1ae1d7d2 $ . transparentize ( rgba ( '#036' , 0.3 ), 0.3 ) // \u21d2 #00003366 $ . transparentize ( '#8000ff' ) // \u21d2 #bf8000ff See also: adjust , % . Utilities \u00b6 How to access these functions To avoid clashes with your own functions' names, all utility functions are defined not globally but on the $ global object instead. Please, see examples below. textToColor \u00b6 Type: ( text : string ) \u2192 qolor This function creates a unique (to some extent) color based on text . It does guarantee that for the same text it always returns the same color. It does not guarantee that for any two different texts the resulting colors will also be different. Examples: $ . textToColor ( 'Button' ) // \u21d2 #471352 let name = 'John' $ . textToColor `Hello, ${ name } !!!` // \u21d2 #234a90 $ . textToColor `Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.` // \u21d2 #a9e52e Oh, God, what have I done\u203d \u21a9","title":"Functions"},{"location":"reference/functions/#functions","text":"This page describes global functions If you are looking for tagged literals or the Color class' methods , check the links.","title":"Functions"},{"location":"reference/functions/#constructors","text":"","title":"Constructors"},{"location":"reference/functions/#qolor","text":"Type: ( color : any-color ) \u2192 qolor Alias: q Constructs a Qt Quick's color from any other color . Examples: q ( 'indigo' ) // \u21d2 #4b0082 q ( Qt . rgba ( 1 , 1 , 0 , 1 )) // \u21d2 #ffff00 q ( argb32 ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` ) // \u21d2 #ccff8000 q ( cc `#789` ) // \u21d2 #778899","title":"qolor"},{"location":"reference/functions/#color","text":"Type: ( color : any-color ) \u2192 color Alias: cc Constructs an instance of the Color class from any other color . Examples: cc ( 'indigo' ) // \u21d2 #4b0082 cc ( Qt . rgba ( 1 , 1 , 0 , 1 )) // \u21d2 #ffff00 cc ( argb32 ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` ) // \u21d2 #ccff8000 cc ( cc `#789` ) // \u21d2 #778899","title":"color"},{"location":"reference/functions/#rgba","text":"Type: ( red , green , blue , alpha = 1.0 : norm ) \u2192 qolor ( color : any-color , alpha = 1.0 : norm ) \u2192 qolor (1) (2) Alias: rgb Creates a color either from RGBA parameters (1) or from a color and alpha (2). In the latter case, if the color has already some transparency, it will be overridden by a specified value of alpha channel. If this function can't construct a color from its parameters, an exception is raised. Examples: rgba ( 0.5 , 0 , 1 , 0.5 ) // \u21d2 #808000ff rgba ( '#8000ff' , 0.5 ) // \u21d2 #808000ff rgba ( 1 , 0.5 , 0 , 80 [ '%' ]) // \u21d2 #ccff8000 (no alpha): rgb ( 0 , 87 . int , 0.72 ) // \u21d2 #0057b7 rgb ( 1 , 0xD7 . int , 0 ) // \u21d2 #ffd700","title":"rgba"},{"location":"reference/functions/#rgba32","text":"Type: ( red , green , blue , alpha = 255 : 8bit ) \u2192 qolor ( color : any-color , alpha = 255 : 8bit ) \u2192 qolor (1) (2) Alias: rgb24 Creates a color either from RGBA parameters (1) or from a color and alpha (2). In the latter case, if the color has already some transparency, it will be overridden by a specified value of alpha channel. If this function can't construct a color from its parameters, an exception is raised. Examples: rgba32 ( 128 , 0 , 255 , 128 ) // \u21d2 #808000ff rgba32 ( '#8000ff' , 128 ) // \u21d2 #808000ff rgba32 ( 0xFF , 0x80 , 0x00 , 0xCC ) // \u21d2 #ccff8000 (no alpha): rgb24 ( 0 , 87 , 183 ) // \u21d2 #0057b7 rgb24 ( 255 , 215 , 0 ) // \u21d2 #ffd700","title":"rgba32"},{"location":"reference/functions/#argb","text":"Type: ( alpha , red , green , blue : norm ) \u2192 qolor Creates a color from ARGB parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: argb ( 0.5 , 0.5 , 0 , 1 ) // \u21d2 #808000ff argb ( 80 [ '%' ], 1 , 0.5 , 0 ) // \u21d2 #ccff8000","title":"argb"},{"location":"reference/functions/#argb32","text":"Type: ( alpha , red , green , blue : 8bit ) \u2192 qolor Creates a color from ARGB parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: argb32 ( 128 , 128 , 0 , 255 ) // \u21d2 #808000ff argb32 ( 0x80 , 0.5 . byte , 0 , 0xFF ) // \u21d2 #808000ff argb32 ( 204 , 255 , 128 , 0 ) // \u21d2 #ccff8000","title":"argb32"},{"location":"reference/functions/#hsla","text":"Type: ( hue , saturation , lightness , alpha = 1.0 : norm ) \u2192 qolor Alias: hsl Creates a color from HSLA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hsla ( 0.75 , 1 , 0.5 , 0.5 ) // \u21d2 #808000ff hsla ( 270 . deg , 100 . percent , 50 . percent , 50 . percent , ) // \u21d2 #808000ff hsla ( 30 [ '\u00b0' ], 100 [ '%' ], 50 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hsl ( 211 . deg , 100 . percent , 36 . percent ) // \u21d2 #0057b7 hsl ( 51 . deg , 100 . percent , 50 . percent ) // \u21d2 #ffd700","title":"hsla"},{"location":"reference/functions/#hsva","text":"Type: ( hue , saturation , value , alpha = 1.0 : norm ) \u2192 qolor Alias: hsv Creates a color from HSVA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hsva ( 0.75 , 1 , 1 , 0.5 ) // \u21d2 #808000ff hsva ( 270 . deg , 100 . percent , 100 . percent , 50 . percent ) // \u21d2 #808000ff hsva ( 30 [ '\u00b0' ], 100 [ '%' ], 100 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hsv ( 211 . deg , 100 . percent , 72 . percent ) // \u21d2 #0057b7 hsv ( 51 . deg , 100 . percent , 100 . percent ) // \u21d2 #ffd700","title":"hsva"},{"location":"reference/functions/#hwba","text":"Type: ( hue , whiteness , blackness , alpha = 1.0 : norm ) \u2192 qolor Alias: hwb Creates a color from HWBA parameters. If this function can't construct a color from its parameters, an exception is raised. Examples: hwba ( 0.75 , 0 , 0 , 0.5 ) // \u21d2 #808000ff hwba ( 270 . deg , 0 . percent , 0 . percent , 50 . percent ) // \u21d2 #808000ff hwba ( 30 [ '\u00b0' ], 0 [ '%' ], 0 [ '%' ], 0xCC . int ) // \u21d2 #ccff8000 (no alpha): hwb ( 211 . deg , 0 . percent , 28 . percent ) // \u21d2 #0057b7 hwb ( 51 . deg , 0 . percent , 0 . percent ) // \u21d2 #ffd700","title":"hwba"},{"location":"reference/functions/#modificators","text":"How to access these functions To avoid clashes with your own functions' names, all modifying functions are defined not globally but on the $ global object instead (similarly to jQuery 1 ). It means that you can call them the following way: $ . invert ( 'white' ) // \u21d2 #000000 Category Functions (and aliases) Multi-changes adjust , change , scale Hue adjustHue (or spin ), complement Brightness darken , lighten Saturation desaturate , grayscale (or greyscale ), saturate Opacity opacify (or fadeIn ), transparentize (or fadeOut ) Other invert , mix","title":"Modificators"},{"location":"reference/functions/#adjust","text":"Type: ( color : any-color , change : offset-object ) \u2192 qolor Increases or decreases one or more properties of the color by fixed amounts. Adds the value passed for each keyword argument to the corresponding property of the color , and returns a new adjusted instance of color. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Examples: $ . adjust ( '#6b717f' , { rgb : { r : + 15 . int }}) // \u21d2 #7a717f $ . adjust ( '#d2e1dd' , { rgb : { red : - 10 . int , blue : + 10 . int }}) // \u21d2 #c8e1e7 $ . adjust ( '#998099' , { hsl : { lightness : - 30 . percent }, alpha : - 40 . percent }) // \u21d2 #99473947 See also: change , scale , % , \u00b0 .","title":"adjust"},{"location":"reference/functions/#adjusthue","text":"Type: ( color : any-color , offset : offset ) \u2192 qolor Alias: spin Increases or decreases the color 's hue. Examples: // Hue 222\u00b0 becomes 282\u00b0 $ . adjustHue ( '#6b717f' , + 60 . deg ) // \u21d2 #796b7f // Hue 164\u00b0 becomes 104\u00b0. $ . spin ( '#d2e1dd' , - 60 [ '\u00b0' ]) // \u21d2 #d6e1d2 // Hue 210\u00b0 becomes 255\u00b0 $ . adjustHue ( '#036' , + 45 . deg ) // \u21d2 #1a0066 See also: adjust , \u00b0 .","title":"adjustHue"},{"location":"reference/functions/#change","text":"Type: ( color : any-color , change : change-object ) \u2192 qolor Sets one or more properties of the color to new values and returns a new adjusted instance of color. Restrictions (for more details see change-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type norm and optional. Examples: $ . change ( '#6b717f' , { rgb : { r : 100 . int }}) // \u21d2 #64717f $ . change ( '#d2e1dd' , { rgb : { red : 100 . int , blue : 50 . int }}) // \u21d2 #64e132 $ . change ( '#998099' , { hsl : { lightness : 30 . percent }, alpha : 0.5 }) // \u21d2 #80554455 See also: adjust , scale , % , \u00b0 .","title":"change"},{"location":"reference/functions/#complement","text":"Type: ( color : any-color ) \u2192 qolor Returns the RGB complement of the color . This is identical to adjustHue ( color , - 180 . deg ) . Examples: // Hue 222\u00b0 becomes 42\u00b0 $ . complement ( '#6b717f' ) // \u21d2 #7f796b // Hue 164\u00b0 becomes 344\u00b0 $ . complement ( '#d2e1dd' ) // \u21d2 #e1d2d6 // Hue 210\u00b0 becomes 30\u00b0 $ . complement ( '#036' ) // \u21d2 #663300 See also: adjust , adjustHue , invert .","title":"complement"},{"location":"reference/functions/#darken","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color darker by specified amount (by decreasing the HSL lightness ). Examples: // Lightness 92% becomes 72% $ . darken ( '#b37399' , 20 [ '%' ]) // \u21d2 #7c4465 // Lightness 85% becomes 45% $ . darken ( '#f2ece4' , 40 . percent ) // \u21d2 #b08b5a // Lightness 20% becomes 0% $ . darken ( '#036' , 0.3 ) // \u21d2 #000000 // Lightness 50% becomes 25% $ . darken ( '#8000ff' ) // \u21d2 #000000 See also: adjust , % .","title":"darken"},{"location":"reference/functions/#desaturate","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color less saturated by specified amount (by decreasing the HSL saturation ). Examples: // Saturation 100% becomes 80% $ . desaturate ( '#036' , 20 . percent ) // \u21d2 #0a335c // Saturation 35% becomes 15% $ . desaturate ( '#f2ece4' , 20 . percent ) // \u21d2 #eeebe8 // Saturation 20% becomes 0% $ . desaturate ( '#d2e1dd' , 30 . percent ) // \u21d2 #dadada // Saturation 100% becomes 75% $ . desaturate ( '#8000ff' ) // \u21d2 #8020df See also: adjust , % .","title":"desaturate"},{"location":"reference/functions/#grayscale","text":"Type: ( color : any-color ) \u2192 qolor Alias: greyscale Returns a gray color with the same lightness as the color 's one. This is identical to change ( color , { hsl : { saturation : 0 }}) . Examples: $ . grayscale ( '#6b717f' ) // \u21d2 #757575 $ . grayscale ( '#d2e1dd' ) // \u21d2 #dadada $ . greyscale ( '#036' ) // \u21d2 #333333 See also: change .","title":"grayscale"},{"location":"reference/functions/#invert","text":"Type: ( color : any-color , weight = 1.0 : norm ) \u2192 qolor Returns the negative of the color . A higher weight means the result will be closer to the negative, and a lower weight means it will be closer to the original color . weight = 0.5 will always produce #808080 . Examples: $ . invert ( '#b37399' ) // \u21d2 #4c8c66 $ . invert ( 'black' ) // \u21d2 #ffffff $ . invert ( '#550e0cc' , 20 . percent ) // \u21d2 #663b3a See also: complement , % .","title":"invert"},{"location":"reference/functions/#lighten","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color lighter by specified amount (by increasing the HSL lightness ). Examples: // Lightness 46% becomes 66% $ . lighten ( '#6b717f' , 20 [ '%' ]) // \u21d2 #a1a5af // Lightness 20% becomes 80% $ . lighten ( '#036' , 60 . percent ) // \u21d2 #99ccff // Lightness 85% becomes 100% $ . lighten ( '#e1d7d2' , 0.3 ) // \u21d2 #ffffff // Lightness 50% becomes 75% $ . lighten ( '#8000ff' ) // \u21d2 #c080ff See also: adjust , % .","title":"lighten"},{"location":"reference/functions/#mix","text":"Type: ( color1 , color2 : any-color , weight = 0.5 : norm ) \u2192 qolor Returns a new color that\u2019s a mixture of color1 and color2 . Both the weight and the relative opacity of each color determines how much of each color is in the result. A larger weight indicates that more of color1 should be used, and a smaller weight indicates that more of color2 should be used. By default, the colors are mixed in equal proportions. Examples: $ . mix ( '#036' , cc `#d2e1dd` ) // \u21d2 #698aa2 $ . mix ( '#036' , q `#d2e1dd` , 75 . percent ) // \u21d2 #355f84 $ . mix ( '#036' , '#d2e1dd' , 25 [ '%' ]) // \u21d2 #9eb6bf $ . mix ( cc ` ${ 0.5 . byte } ${ 242 } ${ 236 } ${ 228 } ` , cc `#6b717f` ) // \u21d2 #8d9098 See also: % .","title":"mix"},{"location":"reference/functions/#opacify","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Alias: fadeIn Makes the color more opaque by increasing the alpha channel by amount . Examples: $ . opacify ( '#806b717f' , 0.2 ) // \u21d2 #b36b717f $ . fadeIn ( '#80e1d7d2' , 40 [ '%' ]) // \u21d2 #e6e1d7d2 $ . opacify ( rgba ( '#036' , 0.3 ), 70 [ '%' ]) // \u21d2 #003366 $ . opacify ( '#808000ff' ) // \u21d2 #c08000ff See also: adjust , % .","title":"opacify"},{"location":"reference/functions/#saturate","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Makes the color more saturated by specified amount (by increasing the HSL saturation ). Examples: // Saturation 50% becomes 70% $ . saturate ( '#c69' , 20 . percent ) // \u21d2 #e05299 // Saturation 35% becomes 85% $ . saturate ( '#f2ece4' , 50 [ '%' ]) // \u21d2 #fcedda // Saturation 80% becomes 100% $ . saturate ( '#0e4982' , 0.3 ) // \u21d2 #004990 // Saturation 75% becomes 100% $ . desaturate ( '#8020df' ) // \u21d2 #8000ff See also: adjust , % .","title":"saturate"},{"location":"reference/functions/#scale","text":"Type: ( color : any-color , change : offset-object ) \u2192 qolor Fluidly scales one or more properties of the color and returns a new adjusted instance of color. Each keyword argument indicates how far the corresponding property of the color should be moved from its original position towards the maximum (if the argument is positive) or the minimum (if the argument is negative). This means that, for example, { hsl : { lightness : + 50 [ '%' ]}} will make the color 50% closer to maximum lightness without making it fully white. Restrictions (for more details see offset-object ): alpha keyword can be specified separately. Among rgb , hsl , hsv , and hwb , only one may be used at a time. All keyword arguments are of type offset and optional. Although it is possible to specify hue for HSL , HSV , or HWB keyword arguments, it doesn't make much sense because the menthal model of such a change is vague IMO . Examples: $ . scale ( '#6b717f' , { rgb : { red : + 15 . percent }}) // \u21d2 #81717f $ . scale ( '#d2e1dd' , { hsl : { l : - 10 [ '%' ], s : + 10 [ '%' ] } }) // \u21d2 #b3d4cb $ . scale ( '#998099' , { a : - 40 . percent }) // \u21d2 #99998099 See also: adjust , change , % , \u00b0 .","title":"scale"},{"location":"reference/functions/#transparentize","text":"Type: ( color : any-color , amount = 0.25 : norm ) \u2192 qolor Alias: fadeOut Makes the color less opaque by decreasing the alpha channel by amount . Examples: $ . transparentize ( '#806b717f' , 20 . percent ) // \u21d2 #4d6b717f $ . fadeOut ( rgba ( '#e1d7d2' , 0.5 ), 40 [ '%' ]) // \u21d2 #1ae1d7d2 $ . transparentize ( rgba ( '#036' , 0.3 ), 0.3 ) // \u21d2 #00003366 $ . transparentize ( '#8000ff' ) // \u21d2 #bf8000ff See also: adjust , % .","title":"transparentize"},{"location":"reference/functions/#utilities","text":"How to access these functions To avoid clashes with your own functions' names, all utility functions are defined not globally but on the $ global object instead. Please, see examples below.","title":"Utilities"},{"location":"reference/functions/#texttocolor","text":"Type: ( text : string ) \u2192 qolor This function creates a unique (to some extent) color based on text . It does guarantee that for the same text it always returns the same color. It does not guarantee that for any two different texts the resulting colors will also be different. Examples: $ . textToColor ( 'Button' ) // \u21d2 #471352 let name = 'John' $ . textToColor `Hello, ${ name } !!!` // \u21d2 #234a90 $ . textToColor `Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas porttitor congue massa. Fusce posuere, magna sed pulvinar ultricies, purus lectus malesuada libero, sit amet commodo magna eros quis urna.` // \u21d2 #a9e52e Oh, God, what have I done\u203d \u21a9","title":"textToColor"},{"location":"reference/qolor/","text":"Qt Quick's color \u00b6 Did you know that all property s of color type in Qt Quick have attributes that can be accessed as any other object members (via dot or subscription)? I also didn't because the official documentation contains no information (yes, just nothing, zero info ) about it. But I was so kind to collect this here. It means that you can do, for example, like this: Item { property color color: '#8000ff' Component.onCompleted: { // Print the color's RGB values: console . log ( 'RGB:' , color . r , color . g , color . b ) // \u21d2 RGB: 0.5019607843137255 0 1 // or print the same color as HSV: let { hsvHue: h , hsvSaturation: s , hsvValue: v } = color console . log ( ` hsv ( $ { Math . floor ( h * 360 )} \u00b0 , $ { s * 100 } % , $ { v * 100 } % ) ` ) // \u21d2 hsv(270\u00b0, 100%, 100%) } } Properties \u00b6 Category Properties (and aliases) Common a , valid RGB r , g , b HSL hslHue , hslSaturation , hslLightness HSV hsvHue , hsvSaturation , hsvValue a \u00b6 Type: norm Returns the alpha channel of the color. b \u00b6 Type: norm Returns the RGB blue channel of the color. See also: g , r . g \u00b6 Type: norm Returns the RGB green channel of the color. See also: b , r . hslHue \u00b6 Type: norm Alias: hsvHue Returns the HSL or HSV hue of the color. See also: HSL : hslLightness , hslSaturation HSV : hsvSaturation , hsvValue hslLightness \u00b6 Type: norm Returns the HSL lightness of the color. See also: hslHue , hslSaturation . r \u00b6 Type: norm Returns the RGB red channel of the color. See also: b , g . hslSaturation \u00b6 Type: norm Returns the HSL saturation of the color. For HSV saturation , see hsvSaturation . See also: hslHue , hslLightness . hsvHue \u00b6 Same as hslHue . hsvSaturation \u00b6 Type: norm Returns the HSV saturation of the color. For HSL saturation , see hslSaturation . See also: hsvHue , hsvValue . hsvValue \u00b6 Type: norm Returns the HSV value of the color. See also: hsvHue , hsvSaturation . valid \u00b6 Type: boolean Returns true if the color is valid and false otherwise. The only two ways of getting invalid colors in QML I found are: Passing an invalid (for example, default-constructed QColor from C++. Defining an uninitialized color property: Item { property color myColor Component.onCompleted: { console . log ( myColor . valid ) // \u21d2 false } }","title":"Qt Quick's color"},{"location":"reference/qolor/#qt-quicks-color","text":"Did you know that all property s of color type in Qt Quick have attributes that can be accessed as any other object members (via dot or subscription)? I also didn't because the official documentation contains no information (yes, just nothing, zero info ) about it. But I was so kind to collect this here. It means that you can do, for example, like this: Item { property color color: '#8000ff' Component.onCompleted: { // Print the color's RGB values: console . log ( 'RGB:' , color . r , color . g , color . b ) // \u21d2 RGB: 0.5019607843137255 0 1 // or print the same color as HSV: let { hsvHue: h , hsvSaturation: s , hsvValue: v } = color console . log ( ` hsv ( $ { Math . floor ( h * 360 )} \u00b0 , $ { s * 100 } % , $ { v * 100 } % ) ` ) // \u21d2 hsv(270\u00b0, 100%, 100%) } }","title":"Qt Quick's color"},{"location":"reference/qolor/#properties","text":"Category Properties (and aliases) Common a , valid RGB r , g , b HSL hslHue , hslSaturation , hslLightness HSV hsvHue , hsvSaturation , hsvValue","title":"Properties"},{"location":"reference/qolor/#a","text":"Type: norm Returns the alpha channel of the color.","title":"a"},{"location":"reference/qolor/#b","text":"Type: norm Returns the RGB blue channel of the color. See also: g , r .","title":"b"},{"location":"reference/qolor/#g","text":"Type: norm Returns the RGB green channel of the color. See also: b , r .","title":"g"},{"location":"reference/qolor/#hslhue","text":"Type: norm Alias: hsvHue Returns the HSL or HSV hue of the color. See also: HSL : hslLightness , hslSaturation HSV : hsvSaturation , hsvValue","title":"hslHue"},{"location":"reference/qolor/#hsllightness","text":"Type: norm Returns the HSL lightness of the color. See also: hslHue , hslSaturation .","title":"hslLightness"},{"location":"reference/qolor/#r","text":"Type: norm Returns the RGB red channel of the color. See also: b , g .","title":"r"},{"location":"reference/qolor/#hslsaturation","text":"Type: norm Returns the HSL saturation of the color. For HSV saturation , see hsvSaturation . See also: hslHue , hslLightness .","title":"hslSaturation"},{"location":"reference/qolor/#hsvhue","text":"Same as hslHue .","title":"hsvHue"},{"location":"reference/qolor/#hsvsaturation","text":"Type: norm Returns the HSV saturation of the color. For HSL saturation , see hslSaturation . See also: hsvHue , hsvValue .","title":"hsvSaturation"},{"location":"reference/qolor/#hsvvalue","text":"Type: norm Returns the HSV value of the color. See also: hsvHue , hsvSaturation .","title":"hsvValue"},{"location":"reference/qolor/#valid","text":"Type: boolean Returns true if the color is valid and false otherwise. The only two ways of getting invalid colors in QML I found are: Passing an invalid (for example, default-constructed QColor from C++. Defining an uninitialized color property: Item { property color myColor Component.onCompleted: { console . log ( myColor . valid ) // \u21d2 false } }","title":"valid"},{"location":"reference/tagged-literals/","text":"Tagged literals \u00b6 This feature is based on tagged templates from ES2016. It allow constructing color objects using one of the available tags listed below in a quick and easy manner. Skipped notation part? You can always find it here . Instead of introduction \u00b6 If you are too lazy to read the documentation on tagged template literals from ES2016, I'm here to help you with this short introduction. About tagged literals Some general information on how to pass parameters to tagged literals is available here . For all tags except qolor and color the following rules apply: String parts are ignored. The following literals are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` argb `a: ${ 0.5 } r: ${ 0.5 } g: ${ 0 } b: ${ 1 } ` Previous rule means the literals can be multiline. These are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` argb ` a: ${ 0.5 } r: ${ 0.5 } g: ${ 0 } b: ${ 1 } ` argb ` alpha: ${ 1 / 2 } red: ${ 1 / 2 } green: ${ 0 } blue: ${ 1 } ` Every parameter is an expression, so it can contain calculations or any other code. These are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` const anotherElementOpacity = 1.0 const r = 0.5 const g = 0.0 const b = 1.0 argb ` ${ anotherElementOpacity / 2 } ${ r } ${ g } ${ b } ` If a parameter has some default value , it can be omitted. The following literals are equal: rgba ` ${ 0.5 }${ 0 }${ 1 }${ 1 } ` rgba ` ${ 0.5 }${ 0 }${ 1 } ` List of available tags \u00b6 The first two tags\u2014 qolor and color \u2014are trying to cover 80% of needs of an average user of the library by using a multi-step heuristics approach. If you need to construct a color using a precise form, please, see argb , argb32 , hsla , hsva , hwba , rgba , or rgba32 below. qolor \u00b6 Alias: q (various types) \u2192 qolor ( name : color-name ) \u2192 qolor ( #aarrggbb | #rrggbb | #argb | #rgb : color-literal ) \u2192 qolor ( a = 255 , r , g , b : 8bit ) \u2192 qolor This tag tries to construct a Qt color based on the following magic (order matters): Treat the resulting string as color name . Treat the resulting string as color literal . Treat the template parameters as ARGB32 . Treat the template parameters as RGB24 If nothing works, return undefined . Examples: Color names \u00b6 q `indigo` // \u21d2 #4b0082 q `yellow` // \u21d2 #ffff00 const fish = 'salmon' q `dark ${ fish } ` // \u21d2 #e9967a AKA darksalmon Color literals \u00b6 q `#789` // \u21d2 #778899 q `#8000ff` // \u21d2 #8000ff q `#ccff8000` // \u21d2 #ccff8000 (A)RGB32 \u00b6 q ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` // \u21d2 #ccff8000 q ` ${ 128 }${ 0 }${ 255 } ` // \u21d2 #8000ff Beware the hash # ! If your literal starts with # and contains no spaces, it will be treated first as a regular color literal giving you most probably an unexpected result. Let's consider an example: q ` ${ 0x20 }${ 0x00 }${ 0xff } ` // \u21d2 #2000ff It contructs us exactly what we wanted: #2000ff . How? It first tries to match it as a color name, doesn't succeed, then tries to match as a regular color literal, again no success, and then it matches it as RGB24. Now, let's look at and analyze the following: q `# ${ 0x20 }${ 0x00 }${ 0xff } ` // \u21d2 #320255 We see that it's nearly the same except the hash sign # in the very beginning. And again, it tries to match agains color names first with no success, obviously. However, then it tries to match it as a regular color literal . To do so, it needs to combine the parameters into a string: First, let's convert hexadecimal numbers into decimal 20 16 = 32 10 0 16 = 0 10 FF 16 = 255 10 Then we combine a string as if it were a regular (not tagged) template as following: `# ${ 32 }${ 0 }${ 255 } ` The resulting string starts with # and contains exactly 6 digits, so it is treated as a color literal. The #320255 is returned. color \u00b6 Alias: cc (various types) \u2192 color ( name : color-name ) \u2192 color ( #aarrggbb | #rrggbb | #argb | #rgb : color-literal ) \u2192 color ( a = 255 , r , g , b : 8bit ) \u2192 color The only difference to qolor tag is that this one creates an instance of the Color class instead of a regular Qt color . This class contains lots of useful methods and is far more superior in general. However, everthing comes with a price . Color names \u00b6 cc `indigo` // \u21d2 #4b0082 cc `yellow` // \u21d2 #ffff00 const fish = 'salmon' cc `dark ${ fish } ` // \u21d2 #e9967a AKA darksalmon Color literals \u00b6 cc `#789` // \u21d2 #778899 cc `#8000ff` // \u21d2 #8000ff cc `#ccff8000` // \u21d2 #ccff8000 (A)RGB32 \u00b6 cc ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` // \u21d2 #ccff8000 cc ` ${ 128 }${ 0 }${ 255 } ` // \u21d2 #8000ff argb \u00b6 Type: ( alpha , red , green , blue : norm ) \u2192 qolor Creates a color from ARGB parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: argb ` ${ 0.5 } ${ 0.5 } ${ 0 } ${ 1 } ` // \u21d2 #808000ff argb ` ${ 80 [ '%' ] } ${ 1 } ${ 0.5 } ${ 0 } ` // \u21d2 #ccff8000 argb32 \u00b6 Type: ( alpha , red , green , blue : 8bit ) \u2192 qolor Creates a color from ARGB parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: argb32 ` ${ 128 } ${ 128 } ${ 0 } ${ 255 } ` // \u21d2 #808000ff argb32 ` ${ 0x80 } ${ 0.5 . byte } ${ 0 } ${ 0xFF } ` // \u21d2 #808000ff argb32 ` ${ 204 } ${ 255 } ${ 128 } ${ 0 } ` // \u21d2 #ccff8000 hsla \u00b6 Type: ( hue , saturation , lightness , alpha = 1.0 : norm ) \u2192 qolor Alias: hsl Creates a color from HSLA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hsla ` ${ 0.75 } ${ 1 } ${ 0.5 } ${ 0.5 } ` // \u21d2 #808000ff hsla ` hue: ${ 270 . deg } saturation: ${ 100 . percent } lightness: ${ 50 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hsla ` ${ 30 [ '\u00b0' ] } ${ 100 [ '%' ] } ${ 50 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hsl ` ${ 211 . deg } ${ 100 . percent } ${ 36 . percent } ` // \u21d2 #0057b7 hsl ` ${ 51 . deg } ${ 100 . percent } ${ 50 . percent } ` // \u21d2 #ffd700 hsva \u00b6 Type: ( hue , saturation , value , alpha = 1.0 : norm ) \u2192 qolor Alias: hsv Creates a color from HSVA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hsva ` ${ 0.75 } ${ 1 } ${ 1 } ${ 0.5 } ` // \u21d2 #808000ff hsva ` hue: ${ 270 . deg } saturation: ${ 100 . percent } value: ${ 100 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hsva ` ${ 30 [ '\u00b0' ] } ${ 100 [ '%' ] } ${ 100 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hsv ` ${ 211 . deg } ${ 100 . percent } ${ 72 . percent } ` // \u21d2 #0057b7 hsv ` ${ 51 . deg } ${ 100 . percent } ${ 100 . percent } ` // \u21d2 #ffd700 hwba \u00b6 Type: ( hue , whiteness , blackness , alpha = 1.0 : norm ) \u2192 qolor Alias: hwb Creates a color from HWBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hwba ` ${ 0.75 } ${ 0 } ${ 0 } ${ 0.5 } ` // \u21d2 #808000ff hwba ` hue: ${ 270 . deg } blackness: ${ 0 . percent } whiteness: ${ 0 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hwba ` ${ 30 [ '\u00b0' ] } ${ 0 [ '%' ] } ${ 0 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hwb ` ${ 211 . deg } ${ 0 . percent } ${ 28 . percent } ` // \u21d2 #0057b7 hwb ` ${ 51 . deg } ${ 0 . percent } ${ 0 . percent } ` // \u21d2 #ffd700 rgba \u00b6 Type: ( red , green , blue , alpha = 1.0 : norm ) \u2192 qolor Alias: rgb Creates a color from RGBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: rgba ` ${ 0.5 } ${ 0 } ${ 1 } ${ 0.5 } ` // \u21d2 #808000ff rgba ` ${ 1 } ${ 0.5 } ${ 0 } ${ 80 [ '%' ] } ` // \u21d2 #ccff8000 (no alpha): rgb ` ${ 0 } ${ 87 . int } ${ 0.72 } ` // \u21d2 #0057b7 rgb ` ${ 1 } ${ 0xD7 . int } ${ 0 } ` // \u21d2 #ffd700 rgba32 \u00b6 Type: ( red , green , blue , alpha = 255 : 8bit ) \u2192 qolor Alias: rgb24 Creates a color from RGBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: rgba32 ` ${ 128 } ${ 0 } ${ 255 } ${ 128 } ` // \u21d2 #808000ff rgba32 ` ${ 0xFF } ${ 0x80 } ${ 0x00 } ${ 0xCC } ` // \u21d2 #ccff8000 (no alpha): rgb24 ` ${ 0 } ${ 87 } ${ 183 } ` // \u21d2 #0057b7 rgb24 ` ${ 255 } ${ 215 } ${ 0 } ` // \u21d2 #ffd700","title":"Tagged literals"},{"location":"reference/tagged-literals/#tagged-literals","text":"This feature is based on tagged templates from ES2016. It allow constructing color objects using one of the available tags listed below in a quick and easy manner. Skipped notation part? You can always find it here .","title":"Tagged literals"},{"location":"reference/tagged-literals/#instead-of-introduction","text":"If you are too lazy to read the documentation on tagged template literals from ES2016, I'm here to help you with this short introduction. About tagged literals Some general information on how to pass parameters to tagged literals is available here . For all tags except qolor and color the following rules apply: String parts are ignored. The following literals are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` argb `a: ${ 0.5 } r: ${ 0.5 } g: ${ 0 } b: ${ 1 } ` Previous rule means the literals can be multiline. These are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` argb ` a: ${ 0.5 } r: ${ 0.5 } g: ${ 0 } b: ${ 1 } ` argb ` alpha: ${ 1 / 2 } red: ${ 1 / 2 } green: ${ 0 } blue: ${ 1 } ` Every parameter is an expression, so it can contain calculations or any other code. These are equal: argb ` ${ 0.5 }${ 0.5 }${ 0 }${ 1 } ` const anotherElementOpacity = 1.0 const r = 0.5 const g = 0.0 const b = 1.0 argb ` ${ anotherElementOpacity / 2 } ${ r } ${ g } ${ b } ` If a parameter has some default value , it can be omitted. The following literals are equal: rgba ` ${ 0.5 }${ 0 }${ 1 }${ 1 } ` rgba ` ${ 0.5 }${ 0 }${ 1 } `","title":"Instead of introduction"},{"location":"reference/tagged-literals/#list-of-available-tags","text":"The first two tags\u2014 qolor and color \u2014are trying to cover 80% of needs of an average user of the library by using a multi-step heuristics approach. If you need to construct a color using a precise form, please, see argb , argb32 , hsla , hsva , hwba , rgba , or rgba32 below.","title":"List of available tags"},{"location":"reference/tagged-literals/#qolor","text":"Alias: q (various types) \u2192 qolor ( name : color-name ) \u2192 qolor ( #aarrggbb | #rrggbb | #argb | #rgb : color-literal ) \u2192 qolor ( a = 255 , r , g , b : 8bit ) \u2192 qolor This tag tries to construct a Qt color based on the following magic (order matters): Treat the resulting string as color name . Treat the resulting string as color literal . Treat the template parameters as ARGB32 . Treat the template parameters as RGB24 If nothing works, return undefined . Examples:","title":"qolor"},{"location":"reference/tagged-literals/#color-names","text":"q `indigo` // \u21d2 #4b0082 q `yellow` // \u21d2 #ffff00 const fish = 'salmon' q `dark ${ fish } ` // \u21d2 #e9967a AKA darksalmon","title":"Color names"},{"location":"reference/tagged-literals/#color-literals","text":"q `#789` // \u21d2 #778899 q `#8000ff` // \u21d2 #8000ff q `#ccff8000` // \u21d2 #ccff8000","title":"Color literals"},{"location":"reference/tagged-literals/#argb32","text":"q ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` // \u21d2 #ccff8000 q ` ${ 128 }${ 0 }${ 255 } ` // \u21d2 #8000ff Beware the hash # ! If your literal starts with # and contains no spaces, it will be treated first as a regular color literal giving you most probably an unexpected result. Let's consider an example: q ` ${ 0x20 }${ 0x00 }${ 0xff } ` // \u21d2 #2000ff It contructs us exactly what we wanted: #2000ff . How? It first tries to match it as a color name, doesn't succeed, then tries to match as a regular color literal, again no success, and then it matches it as RGB24. Now, let's look at and analyze the following: q `# ${ 0x20 }${ 0x00 }${ 0xff } ` // \u21d2 #320255 We see that it's nearly the same except the hash sign # in the very beginning. And again, it tries to match agains color names first with no success, obviously. However, then it tries to match it as a regular color literal . To do so, it needs to combine the parameters into a string: First, let's convert hexadecimal numbers into decimal 20 16 = 32 10 0 16 = 0 10 FF 16 = 255 10 Then we combine a string as if it were a regular (not tagged) template as following: `# ${ 32 }${ 0 }${ 255 } ` The resulting string starts with # and contains exactly 6 digits, so it is treated as a color literal. The #320255 is returned.","title":"(A)RGB32"},{"location":"reference/tagged-literals/#color","text":"Alias: cc (various types) \u2192 color ( name : color-name ) \u2192 color ( #aarrggbb | #rrggbb | #argb | #rgb : color-literal ) \u2192 color ( a = 255 , r , g , b : 8bit ) \u2192 color The only difference to qolor tag is that this one creates an instance of the Color class instead of a regular Qt color . This class contains lots of useful methods and is far more superior in general. However, everthing comes with a price .","title":"color"},{"location":"reference/tagged-literals/#color-names_1","text":"cc `indigo` // \u21d2 #4b0082 cc `yellow` // \u21d2 #ffff00 const fish = 'salmon' cc `dark ${ fish } ` // \u21d2 #e9967a AKA darksalmon","title":"Color names"},{"location":"reference/tagged-literals/#color-literals_1","text":"cc `#789` // \u21d2 #778899 cc `#8000ff` // \u21d2 #8000ff cc `#ccff8000` // \u21d2 #ccff8000","title":"Color literals"},{"location":"reference/tagged-literals/#argb32_1","text":"cc ` ${ 0xCC }${ 255 }${ 128 }${ 0 } ` // \u21d2 #ccff8000 cc ` ${ 128 }${ 0 }${ 255 } ` // \u21d2 #8000ff","title":"(A)RGB32"},{"location":"reference/tagged-literals/#argb","text":"Type: ( alpha , red , green , blue : norm ) \u2192 qolor Creates a color from ARGB parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: argb ` ${ 0.5 } ${ 0.5 } ${ 0 } ${ 1 } ` // \u21d2 #808000ff argb ` ${ 80 [ '%' ] } ${ 1 } ${ 0.5 } ${ 0 } ` // \u21d2 #ccff8000","title":"argb"},{"location":"reference/tagged-literals/#argb32_2","text":"Type: ( alpha , red , green , blue : 8bit ) \u2192 qolor Creates a color from ARGB parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: argb32 ` ${ 128 } ${ 128 } ${ 0 } ${ 255 } ` // \u21d2 #808000ff argb32 ` ${ 0x80 } ${ 0.5 . byte } ${ 0 } ${ 0xFF } ` // \u21d2 #808000ff argb32 ` ${ 204 } ${ 255 } ${ 128 } ${ 0 } ` // \u21d2 #ccff8000","title":"argb32"},{"location":"reference/tagged-literals/#hsla","text":"Type: ( hue , saturation , lightness , alpha = 1.0 : norm ) \u2192 qolor Alias: hsl Creates a color from HSLA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hsla ` ${ 0.75 } ${ 1 } ${ 0.5 } ${ 0.5 } ` // \u21d2 #808000ff hsla ` hue: ${ 270 . deg } saturation: ${ 100 . percent } lightness: ${ 50 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hsla ` ${ 30 [ '\u00b0' ] } ${ 100 [ '%' ] } ${ 50 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hsl ` ${ 211 . deg } ${ 100 . percent } ${ 36 . percent } ` // \u21d2 #0057b7 hsl ` ${ 51 . deg } ${ 100 . percent } ${ 50 . percent } ` // \u21d2 #ffd700","title":"hsla"},{"location":"reference/tagged-literals/#hsva","text":"Type: ( hue , saturation , value , alpha = 1.0 : norm ) \u2192 qolor Alias: hsv Creates a color from HSVA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hsva ` ${ 0.75 } ${ 1 } ${ 1 } ${ 0.5 } ` // \u21d2 #808000ff hsva ` hue: ${ 270 . deg } saturation: ${ 100 . percent } value: ${ 100 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hsva ` ${ 30 [ '\u00b0' ] } ${ 100 [ '%' ] } ${ 100 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hsv ` ${ 211 . deg } ${ 100 . percent } ${ 72 . percent } ` // \u21d2 #0057b7 hsv ` ${ 51 . deg } ${ 100 . percent } ${ 100 . percent } ` // \u21d2 #ffd700","title":"hsva"},{"location":"reference/tagged-literals/#hwba","text":"Type: ( hue , whiteness , blackness , alpha = 1.0 : norm ) \u2192 qolor Alias: hwb Creates a color from HWBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: hwba ` ${ 0.75 } ${ 0 } ${ 0 } ${ 0.5 } ` // \u21d2 #808000ff hwba ` hue: ${ 270 . deg } blackness: ${ 0 . percent } whiteness: ${ 0 . percent } alpha: ${ 50 . percent } ` // \u21d2 #808000ff hwba ` ${ 30 [ '\u00b0' ] } ${ 0 [ '%' ] } ${ 0 [ '%' ] } ${ 0xCC . int } ` // \u21d2 #ccff8000 (no alpha): hwb ` ${ 211 . deg } ${ 0 . percent } ${ 28 . percent } ` // \u21d2 #0057b7 hwb ` ${ 51 . deg } ${ 0 . percent } ${ 0 . percent } ` // \u21d2 #ffd700","title":"hwba"},{"location":"reference/tagged-literals/#rgba","text":"Type: ( red , green , blue , alpha = 1.0 : norm ) \u2192 qolor Alias: rgb Creates a color from RGBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: rgba ` ${ 0.5 } ${ 0 } ${ 1 } ${ 0.5 } ` // \u21d2 #808000ff rgba ` ${ 1 } ${ 0.5 } ${ 0 } ${ 80 [ '%' ] } ` // \u21d2 #ccff8000 (no alpha): rgb ` ${ 0 } ${ 87 . int } ${ 0.72 } ` // \u21d2 #0057b7 rgb ` ${ 1 } ${ 0xD7 . int } ${ 0 } ` // \u21d2 #ffd700","title":"rgba"},{"location":"reference/tagged-literals/#rgba32","text":"Type: ( red , green , blue , alpha = 255 : 8bit ) \u2192 qolor Alias: rgb24 Creates a color from RGBA parameters. If this tag can't construct a color from literal's parameters, an exception is raised. Examples: rgba32 ` ${ 128 } ${ 0 } ${ 255 } ${ 128 } ` // \u21d2 #808000ff rgba32 ` ${ 0xFF } ${ 0x80 } ${ 0x00 } ${ 0xCC } ` // \u21d2 #ccff8000 (no alpha): rgb24 ` ${ 0 } ${ 87 } ${ 183 } ` // \u21d2 #0057b7 rgb24 ` ${ 255 } ${ 215 } ${ 0 } ` // \u21d2 #ffd700","title":"rgba32"},{"location":"reference/units/","text":"Units \u00b6 Units are functions that transform a value from one interval to another and are made for pure convenience. You are free to not use them at all since they have no impact on the main library functionality. All units except byte are intended to return a real offset value \\(r \\in [-1, 1]\\) . But they never check the boundaries, so the resulting value may be out of bounds for the specified interval. This is done intentionally. Cautions \u00b6 Units are defined globally All units are defined on Number . prototype . It means that you can use them with any number literal, or variable, or property in any context, not only when dealing with colors. Note on syntax Although QML is statically typed, JavaScript, which it inherits, is not. It's beneficial to remember it, especially when dealing with numbers. QML has types int , real , and double while JavaScript has only number . So, if a unit name is a valid JS identificator, you are able to use it the following way: 0.5 . unit however, you can't write like this because it leads to an interpreter error: 1. unit // \u21d2 SyntaxError: Invalid or unexpected token \u201cWhat's the difference?\u201d you might think. It's all with the dot. JavaScript allows to omit either a leading or a trailing zero in number literals as following: 0.5 // \u21d2 0.5 .5 // \u21d2 0.5 1. // \u21d2 1.0 1.0 // \u21d2 1.0 So, when you write 1. unit , the interpreter treats the dot as a part of the number literal and not as a method call. To help interpreter understand what you would like to do, you have the following variants ( stolen inspired here ): 1 . unit 1. . unit 1.0 . unit ( 1 ). unit 1 [ 'unit' ] I decided to use almost exclusively the first variant with a space between a number and a unit. But you are free to define your own coding style. For those units with names that are invalid identificators, the only possible way of using it is obviously the last one. Available units \u00b6 % (or percent ) \u00b6 Percent \u2013 a ratio expressed as a fraction of 100. 10 . percent // \u21d2 0.1 + 50 . percent // \u21d2 0.5 - 25 . percent // \u21d2 -0.25 146 [ '%' ] // \u21d2 1.46 \u00b0 (or deg ) \u00b6 Degree represents an angle measurement and is mainly used for hue values in HSL , HSV , or HWB color models. 18 . deg // \u21d2 0.05 + 60 . deg // \u21d2 0.16666667 - 90 [ '\u00b0' ] // \u21d2 -0.25 45 [ '\u00b0' ] // \u21d2 0.125 Note on modulus If you use this unit with an argument which absolute value is greater than 360, it will be taken modulo 360 because, as we know from school, for angles the following applies: $$ 450\u00b0 \\equiv 90\u00b0 \\pmod{360} $$ Example: 450 . deg === 90 [ '\u00b0' ] === 0.25 int \u00b6 This unit can be used to normalize individual components of RGB (A), HSL (A), HSV (A), or HWB (A) color models (such as red, green, blue, lightness, blackness, alpha, etc.) from integer offset \\(s\\in [-255, 255]\\) . 0 . int // \u21d2 0.0 - 255 . int // \u21d2 -1.0 191 . int // \u21d2 0.75 (roughly) 0x7F . int // \u21d2 0.5 (roughly) byte \u00b6 Transforms a real offset to integer offset . - 1 . byte // \u21d2 -255 0.5 . byte // \u21d2 128 Warning Note that it doesn't guarantee an integer result. So in fact, 0.5 . byte returns 127.5 . This is done intentionally to avoid rounding errors when dealing with color functions.","title":"Units"},{"location":"reference/units/#units","text":"Units are functions that transform a value from one interval to another and are made for pure convenience. You are free to not use them at all since they have no impact on the main library functionality. All units except byte are intended to return a real offset value \\(r \\in [-1, 1]\\) . But they never check the boundaries, so the resulting value may be out of bounds for the specified interval. This is done intentionally.","title":"Units"},{"location":"reference/units/#cautions","text":"Units are defined globally All units are defined on Number . prototype . It means that you can use them with any number literal, or variable, or property in any context, not only when dealing with colors. Note on syntax Although QML is statically typed, JavaScript, which it inherits, is not. It's beneficial to remember it, especially when dealing with numbers. QML has types int , real , and double while JavaScript has only number . So, if a unit name is a valid JS identificator, you are able to use it the following way: 0.5 . unit however, you can't write like this because it leads to an interpreter error: 1. unit // \u21d2 SyntaxError: Invalid or unexpected token \u201cWhat's the difference?\u201d you might think. It's all with the dot. JavaScript allows to omit either a leading or a trailing zero in number literals as following: 0.5 // \u21d2 0.5 .5 // \u21d2 0.5 1. // \u21d2 1.0 1.0 // \u21d2 1.0 So, when you write 1. unit , the interpreter treats the dot as a part of the number literal and not as a method call. To help interpreter understand what you would like to do, you have the following variants ( stolen inspired here ): 1 . unit 1. . unit 1.0 . unit ( 1 ). unit 1 [ 'unit' ] I decided to use almost exclusively the first variant with a space between a number and a unit. But you are free to define your own coding style. For those units with names that are invalid identificators, the only possible way of using it is obviously the last one.","title":"Cautions"},{"location":"reference/units/#available-units","text":"","title":"Available units"},{"location":"reference/units/#or-percent","text":"Percent \u2013 a ratio expressed as a fraction of 100. 10 . percent // \u21d2 0.1 + 50 . percent // \u21d2 0.5 - 25 . percent // \u21d2 -0.25 146 [ '%' ] // \u21d2 1.46","title":"% (or percent)"},{"location":"reference/units/#or-deg","text":"Degree represents an angle measurement and is mainly used for hue values in HSL , HSV , or HWB color models. 18 . deg // \u21d2 0.05 + 60 . deg // \u21d2 0.16666667 - 90 [ '\u00b0' ] // \u21d2 -0.25 45 [ '\u00b0' ] // \u21d2 0.125 Note on modulus If you use this unit with an argument which absolute value is greater than 360, it will be taken modulo 360 because, as we know from school, for angles the following applies: $$ 450\u00b0 \\equiv 90\u00b0 \\pmod{360} $$ Example: 450 . deg === 90 [ '\u00b0' ] === 0.25","title":"\u00b0 (or deg)"},{"location":"reference/units/#int","text":"This unit can be used to normalize individual components of RGB (A), HSL (A), HSV (A), or HWB (A) color models (such as red, green, blue, lightness, blackness, alpha, etc.) from integer offset \\(s\\in [-255, 255]\\) . 0 . int // \u21d2 0.0 - 255 . int // \u21d2 -1.0 191 . int // \u21d2 0.75 (roughly) 0x7F . int // \u21d2 0.5 (roughly)","title":"int"},{"location":"reference/units/#byte","text":"Transforms a real offset to integer offset . - 1 . byte // \u21d2 -255 0.5 . byte // \u21d2 128 Warning Note that it doesn't guarantee an integer result. So in fact, 0.5 . byte returns 127.5 . This is done intentionally to avoid rounding errors when dealing with color functions.","title":"byte"}]}